-- init
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
  red inv160(init,n) .
close

-- fkm11
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher1 .
	op s : -> System .
	eq (r3 \in cenc1(nw(s))) = true .
    eq key(r3) = intruder .
	red inv100(s,r3) implies inv160(s,n) implies inv160(fkm11(s,r1,r2,r3),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher1 .
	op s : -> System .
	eq (r3 \in cenc1(nw(s))) = true .
    eq (key(r3) = intruder) = false .
	red inv160(s,n) implies inv160(fkm11(s,r1,r2,r3),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher1 .
	op s : -> System .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv160(s,n) implies inv160(fkm11(s,r1,r2,r3),n) .
close

-- fkm12
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    eq n = r3 .
	red inv160(s,n) implies inv160(fkm12(s,r1,r2,r3),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    -- eq (n = r3) = false .
    eq (creator(n) = creator(r3)) = false .
    eq (forwhom(n) = forwhom(r3)) = false .
    eq (random(n) = random(r3)) = false .

	red inv160(s,n) implies inv160(fkm12(s,r1,r2,r3),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq (r2 = intruder) = false .
	red inv160(s,n) implies inv160(fkm12(s,r1,r2,r3),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv160(s,n) implies inv160(fkm12(s,r1,r2,r3),n) .
close

-- fkm21
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher2 .
	op s : -> System .
	eq (r3 \in cenc2(nw(s))) = true .
    eq key(r3) = intruder .
	red inv110(s,r3) implies inv160(s,n) implies inv160(fkm21(s,r1,r2,r3),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher2 .
	op s : -> System .
	eq (r3 \in cenc2(nw(s))) = true .
    eq (key(r3) = intruder) = false .
	red inv160(s,n) implies inv160(fkm21(s,r1,r2,r3),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher2 .
	op s : -> System .
	eq (r3 \in cenc2(nw(s))) = false .
	red inv160(s,n) implies inv160(fkm21(s,r1,r2,r3),n) .
close

-- fkm22
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    eq n = r3 .
	red inv160(s,n) implies inv160(fkm22(s,r1,r2,r3,r4),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    eq n = r4 .
	red inv160(s,n) implies inv160(fkm22(s,r1,r2,r3,r4),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    -- eq (n = r3) = false .
    eq (creator(n) = creator(r3)) = false .
    eq (forwhom(n) = forwhom(r3)) = false .
    eq (random(n) = random(r3)) = false .

    -- eq (n = r4) = false .
    eq (creator(n) = creator(r4)) = false .
    eq (forwhom(n) = forwhom(r4)) = false .
    eq (random(n) = random(r4)) = false .
	red inv160(s,n) implies inv160(fkm22(s,r1,r2,r3,r4),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq (r2 = intruder) = false .
	red inv160(s,n) implies inv160(fkm22(s,r1,r2,r3,r4),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = false .
	red inv160(s,n) implies inv160(fkm22(s,r1,r2,r3,r4),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv160(s,n) implies inv160(fkm22(s,r1,r2,r3,r4),n) .
close

-- fkm31
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher3 .
	op s : -> System .
	eq (r3 \in cenc3(nw(s))) = true .
    eq key(r3) = intruder .
	red inv120(s,r3) implies inv160(s,n) implies inv160(fkm31(s,r1,r2,r3),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher3 .
	op s : -> System .
	eq (r3 \in cenc3(nw(s))) = true .
    eq (key(r3) = intruder) = false .
	red inv160(s,n) implies inv160(fkm31(s,r1,r2,r3),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher3 .
	op s : -> System .
	eq (r3 \in cenc3(nw(s))) = false .
	red inv160(s,n) implies inv160(fkm31(s,r1,r2,r3),n) .
close

-- fkm32
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    eq n = r3 .
	red inv160(s,n) implies inv160(fkm32(s,r1,r2,r3),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    -- eq (n = r3) = false .
    eq (creator(n) = creator(r3)) = false .
    eq (forwhom(n) = forwhom(r3)) = false .
    eq (random(n) = random(r3)) = false .
	red inv160(s,n) implies inv160(fkm32(s,r1,r2,r3),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq (r2 = intruder) = false .
	red inv160(s,n) implies inv160(fkm32(s,r1,r2,r3),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv160(s,n) implies inv160(fkm32(s,r1,r2,r3),n) .
close

-- sdm1
--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = false .
    eq (r2 = intruder) = false .
	red inv160(s,n) implies inv160(sdm1(s,r1,r2,r3),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = false .
    eq r2 = intruder .
    eq n = n(r1,intruder,r3) .
	red inv160(s,n) implies inv160(sdm1(s,r1,r2,r3),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = false .
    eq r2 = intruder .
    -- eq (n = n(r1,intruder,r3)) = false .
    eq (creator(n) = r1) = false .
    eq (forwhom(n) = intruder) = false .
    eq (random(n) = r3) = false .

	red inv160(s,n) implies inv160(sdm1(s,r1,r2,r3),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = true .
	red inv160(s,n) implies inv160(sdm1(s,r1,r2,r3),n) .
close

-- sdm2
--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = true .
	red inv160(s,n) implies inv160(sdm2(s,r1,r2,r3),n) .
close

--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .

  eq (sender(r3) = intruder) = false .
	red inv160(s,n) implies inv160(sdm2(s,r1,r2,r3),n) .
close

--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq sender(r3) = intruder .
  eq n = nonce(cipher1(r3)) .
--   eq creator(n) = r1 .
--   eq forwhom(n) = intruder .
--   eq random(n) = r2 .
	red inv160(s,n) implies inv160(sdm2(s,r1,r2,r3),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq sender(r3) = intruder .
--   eq creator(n) = r1 .
--   eq forwhom(n) = intruder .
--   eq random(n) = r2 .
  eq n = n(r1,intruder,r2) .
	red inv160(s,n) implies inv160(sdm2(s,r1,r2,r3),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq sender(r3) = intruder .
  -- eq (n = n(r1,intruder,r2)) = false .
  eq (creator(n) = r1) = false .
  eq (forwhom(n) = intruder) = false .
  eq (random(n) = r2) = false .
  eq (creator(n) = creator(nonce(cipher1(r3)))) = false .
  eq (forwhom(n) = forwhom(nonce(cipher1(r3)))) = false .
  eq (random(n) = random(nonce(cipher1(r3)))) = false .
  -- eq (n = nonce(cipher1(r3))) = false .
	red inv160(s,n) implies inv160(sdm2(s,r1,r2,r3),n) .
close

-- true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv160(s,n) implies inv160(sdm2(s,r1,r2,r3),n) .
close

-- true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq (key(cipher1(r3)) = r1) = false .
	red inv160(s,n) implies inv160(sdm2(s,r1,r2,r3),n) .
close

-- true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq (receiver(r3) = r1) = false .
	red inv160(s,n) implies inv160(sdm2(s,r1,r2,r3),n) .
close

-- true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = false .
	red inv160(s,n) implies inv160(sdm2(s,r1,r2,r3),n) .
close

-- true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = false .
	red inv160(s,n) implies inv160(sdm2(s,r1,r2,r3),n) .
close

-- sdm3
--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq forwhom(nonce(cipher1(r3))) = sender(r4) .
    eq random(nonce(cipher1(r3))) = r2 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq principal(cipher2(r4)) = sender(r4) .
    eq creator(nonce1(cipher2(r4))) = r1 .
	eq forwhom(nonce1(cipher2(r4))) = sender(r4) .
	eq random(nonce1(cipher2(r4))) = r2 .

    eq (sender(r4) = intruder) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq forwhom(nonce(cipher1(r3))) = sender(r4) .
    eq random(nonce(cipher1(r3))) = r2 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq principal(cipher2(r4)) = sender(r4) .
    eq creator(nonce1(cipher2(r4))) = r1 .
	eq forwhom(nonce1(cipher2(r4))) = sender(r4) .
	eq random(nonce1(cipher2(r4))) = r2 .

    eq sender(r4) = intruder .
    -- eq n = nonce2(cipher2(r4)) .
    eq creator(n) = creator(nonce2(cipher2(r4))) .
    eq forwhom(n) = forwhom(nonce2(cipher2(r4))) .
    eq random(n) = random(nonce2(cipher2(r4))) .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq forwhom(nonce(cipher1(r3))) = sender(r4) .
    eq random(nonce(cipher1(r3))) = r2 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq principal(cipher2(r4)) = sender(r4) .
    eq creator(nonce1(cipher2(r4))) = r1 .
	eq forwhom(nonce1(cipher2(r4))) = sender(r4) .
	eq random(nonce1(cipher2(r4))) = r2 .

    eq sender(r4) = intruder .
    eq (creator(n) = creator(nonce2(cipher2(r4)))) = false .
    eq (forwhom(n) = forwhom(nonce2(cipher2(r4)))) = false .
    eq (random(n) = random(nonce2(cipher2(r4)))) = false .
    -- eq (n = nonce2(cipher2(r4))) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq forwhom(nonce(cipher1(r3))) = sender(r4) .
    eq random(nonce(cipher1(r3))) = r2 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq principal(cipher2(r4)) = sender(r4) .
    eq creator(nonce1(cipher2(r4))) = r1 .
	eq forwhom(nonce1(cipher2(r4))) = sender(r4) .
	eq (random(nonce1(cipher2(r4))) = r2) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq forwhom(nonce(cipher1(r3))) = sender(r4) .
    eq random(nonce(cipher1(r3))) = r2 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq principal(cipher2(r4)) = sender(r4) .
    eq creator(nonce1(cipher2(r4))) = r1 .
	eq (forwhom(nonce1(cipher2(r4))) = sender(r4)) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq forwhom(nonce(cipher1(r3))) = sender(r4) .
    eq random(nonce(cipher1(r3))) = r2 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq principal(cipher2(r4)) = sender(r4) .
    eq (creator(nonce1(cipher2(r4))) = r1) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq forwhom(nonce(cipher1(r3))) = sender(r4) .
    eq random(nonce(cipher1(r3))) = r2 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq (principal(cipher2(r4)) = sender(r4)) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq forwhom(nonce(cipher1(r3))) = sender(r4) .
    eq random(nonce(cipher1(r3))) = r2 .
    eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq forwhom(nonce(cipher1(r3))) = sender(r4) .
    eq random(nonce(cipher1(r3))) = r2 .
    eq (receiver(r4) = r1) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq forwhom(nonce(cipher1(r3))) = sender(r4) .
    eq (random(nonce(cipher1(r3))) = r2) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq (forwhom(nonce(cipher1(r3))) = sender(r4)) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq (creator(nonce(cipher1(r3))) = r1) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq (principal(cipher1(r3)) = r1) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq (key(cipher1(r3)) = sender(r4)) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq (receiver(r3) = sender(r4)) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq (sender(r3) = r1) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

--> true
open INV .
  -- :id(nslpk1)
	op n : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = false .
	red inv160(s,n) implies inv160(sdm3(s,r1,r2,r3,r4),n) .
close

-- open INV .
--   :proof(nslpk1)
-- close