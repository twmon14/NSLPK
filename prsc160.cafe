-- init
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
  red inv160(init,n1) .
close

-- fkm11 (all cases - true)
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher1 .
	op s : -> System .
	eq (r3 \in cenc1(nw(s))) = true .
    eq key(r3) = intruder .
	red inv100(s,r3) implies inv160(s,n1) implies inv160(fkm11(s,r1,r2,r3),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher1 .
	op s : -> System .
	eq (r3 \in cenc1(nw(s))) = true .
    eq (key(r3) = intruder) = false .
	red inv160(s,n1) implies inv160(fkm11(s,r1,r2,r3),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher1 .
	op s : -> System .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv160(s,n1) implies inv160(fkm11(s,r1,r2,r3),n1) .
close

 -- fkm12 (all cases - true)
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    -- eq n1 = r3 . rewrite
	eq creator(n1) = creator(r3) .
    eq forwhom(n1) = forwhom(r3) .
    eq random(n1) = random(r3) .
	red inv160(s,n1) implies inv160(fkm12(s,r1,r2,r3),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    -- eq n1 = r3 . rewrite
	eq creator(n1) = creator(r3) .
    eq forwhom(n1) = forwhom(r3) .
    eq (random(n1) = random(r3)) = false .
	red inv160(s,n1) implies inv160(fkm12(s,r1,r2,r3),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    -- eq n1 = r3 . rewrite
	eq creator(n1) = creator(r3) .
    eq (forwhom(n1) = forwhom(r3)) = false .
	red inv160(s,n1) implies inv160(fkm12(s,r1,r2,r3),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    -- eq n1 = r3 . rewrite
    eq (creator(n1) = creator(r3)) = false .
	red inv160(s,n1) implies inv160(fkm12(s,r1,r2,r3),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq (r2 = intruder) = false .
	red inv160(s,n1) implies inv160(fkm12(s,r1,r2,r3),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv160(s,n1) implies inv160(fkm12(s,r1,r2,r3),n1) .
close

-- fkm21 (all cases - true)
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher2 .
	op s : -> System .
	eq (r3 \in cenc2(nw(s))) = true .
    eq key(r3) = intruder .
	red inv110(s,r3) implies inv160(s,n1) implies inv160(fkm21(s,r1,r2,r3),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher2 .
	op s : -> System .
	eq (r3 \in cenc2(nw(s))) = true .
    eq (key(r3) = intruder) = false .
	red inv160(s,n1) implies inv160(fkm21(s,r1,r2,r3),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher2 .
	op s : -> System .
	eq (r3 \in cenc2(nw(s))) = false .
	red inv160(s,n1) implies inv160(fkm21(s,r1,r2,r3),n1) .
close

-- -- fkm22 (not all true)
-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Principal .
-- 	op r3 : -> Nonce .
-- 	op r4 : -> Nonce .
-- 	op s : -> System .
-- 	eq (r3 \in cnonce(nw(s))) = true .
-- 	eq (r4 \in cnonce(nw(s))) = true .
	
--     eq r2 = intruder .
--     -- eq n1 = r3 . rewrite
-- 	eq creator(n1) = creator(r3) .
--     eq forwhom(n1) = forwhom(r3) .
--     eq random(n1) = random(r3) .

-- 	red inv160(s,n1) implies inv160(fkm22(s,r1,r2,r3,r4),n1) .
-- close

-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Principal .
-- 	op r3 : -> Nonce .
-- 	op r4 : -> Nonce .
-- 	op s : -> System .
-- 	eq (r3 \in cnonce(nw(s))) = true .
-- 	eq (r4 \in cnonce(nw(s))) = true .
--     eq r2 = intruder .
--     -- eq n1 = r3 . rewrite
-- 	eq creator(n1) = creator(r3) .
--     eq forwhom(n1) = forwhom(r3) .
--     eq (random(n1) = random(r3)) = false.

-- 	eq creator(n1) = creator(r4) .
--     eq forwhom(n1) = forwhom(r4) .
--     eq random(n1) = random(r4) .

-- 	eq (creator(r3) = intruder) = false .

-- 	red lm1(r4,n1,cnonce(nw(s)))
-- 	implies inv160(s,n1) implies inv160(fkm22(s,r1,r2,r3,r4),n1) .
-- close

-- -- long term
-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Principal .
-- 	op r3 : -> Nonce .
-- 	op r4 : -> Nonce .
-- 	op s : -> System .
-- 	eq (r3 \in cnonce(nw(s))) = true .
-- 	eq (r4 \in cnonce(nw(s))) = true .
--     eq r2 = intruder .
--     -- eq n1 = r3 . rewrite
-- 	eq creator(n1) = creator(r3) .
--     eq forwhom(n1) = forwhom(r3) .
--     eq (random(n1) = random(r3)) = false .

-- 	eq creator(n1) = creator(r4) .
--     eq forwhom(n1) = forwhom(r4) .
--     eq random(n1) = random(r4) .

-- 	eq creator(r3) = intruder .

-- 	red inv160(s,n1) implies inv160(fkm22(s,r1,r2,r3,r4),n1) .
-- close

-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Principal .
-- 	op r3 : -> Nonce .
-- 	op r4 : -> Nonce .
-- 	op s : -> System .
-- 	eq (r3 \in cnonce(nw(s))) = true .
-- 	eq (r4 \in cnonce(nw(s))) = true .
--     eq r2 = intruder .

-- 	eq creator(n1) = creator(r3) .
--     eq forwhom(n1) = forwhom(r3) .
--     eq (random(n1) = random(r3)) = false .

-- 	eq creator(n1) = creator(r4) .
--     eq forwhom(n1) = forwhom(r4) .
--     eq (random(n1) = random(r4)) = false .	

-- 	red inv160(s,n1) implies inv160(fkm22(s,r1,r2,r3,r4),n1) .
-- close

-- -- long term
-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Principal .
-- 	op r3 : -> Nonce .
-- 	op r4 : -> Nonce .
-- 	op s : -> System .
-- 	eq (r3 \in cnonce(nw(s))) = true .
-- 	eq (r4 \in cnonce(nw(s))) = true .
--     eq r2 = intruder .

-- 	eq creator(n1) = creator(r3) .
--     eq forwhom(n1) = forwhom(r3) .
--     eq (random(n1) = random(r3)) = false .

-- 	eq creator(n1) = creator(r4) .
--     eq (forwhom(n1) = forwhom(r4)) = false .
-- 	red inv160(s,n1) implies inv160(fkm22(s,r1,r2,r3,r4),n1) .
-- close

-- -- long term
-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Principal .
-- 	op r3 : -> Nonce .
-- 	op r4 : -> Nonce .
-- 	op s : -> System .
-- 	eq (r3 \in cnonce(nw(s))) = true .
-- 	eq (r4 \in cnonce(nw(s))) = true .
--     eq r2 = intruder .

-- 	eq creator(n1) = creator(r3) .
--     eq forwhom(n1) = forwhom(r3) .
--     eq (random(n1) = random(r3)) = false .

-- 	eq (creator(n1) = creator(r4)) = false .
-- 	red inv160(s,n1) implies inv160(fkm22(s,r1,r2,r3,r4),n1) .
-- close

-- -- long term
-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Principal .
-- 	op r3 : -> Nonce .
-- 	op r4 : -> Nonce .
-- 	op s : -> System .
-- 	eq (r3 \in cnonce(nw(s))) = true .
-- 	eq (r4 \in cnonce(nw(s))) = true .
--     eq r2 = intruder .

-- 	eq creator(n1) = creator(r3) .
--     eq (forwhom(n1) = forwhom(r3)) = false .
    
-- 	red inv160(s,n1) implies inv160(fkm22(s,r1,r2,r3,r4),n1) .
-- close

-- -- long term
-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Principal .
-- 	op r3 : -> Nonce .
-- 	op r4 : -> Nonce .
-- 	op s : -> System .
-- 	eq (r3 \in cnonce(nw(s))) = true .
-- 	eq (r4 \in cnonce(nw(s))) = true .
--     eq r2 = intruder .

-- 	eq (creator(n1) = creator(r3)) = false .
    
-- 	red inv160(s,n1) implies inv160(fkm22(s,r1,r2,r3,r4),n1) .
-- close

-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Principal .
-- 	op r3 : -> Nonce .
-- 	op r4 : -> Nonce .
-- 	op s : -> System .
-- 	eq (r3 \in cnonce(nw(s))) = true .
-- 	eq (r4 \in cnonce(nw(s))) = true .
--     eq (r2 = intruder) = false .
-- 	red inv160(s,n1) implies inv160(fkm22(s,r1,r2,r3,r4),n1) .
-- close

-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Principal .
-- 	op r3 : -> Nonce .
-- 	op r4 : -> Nonce .
-- 	op s : -> System .
-- 	eq (r3 \in cnonce(nw(s))) = true .
-- 	eq (r4 \in cnonce(nw(s))) = false .
-- 	red inv160(s,n1) implies inv160(fkm22(s,r1,r2,r3,r4),n1) .
-- close

-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Principal .
-- 	op r3 : -> Nonce .
-- 	op r4 : -> Nonce .
-- 	op s : -> System .
-- 	eq (r3 \in cnonce(nw(s))) = false .
-- 	red inv160(s,n1) implies inv160(fkm22(s,r1,r2,r3,r4),n1) .
-- close

-- fkm31 (all - true)
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher3 .
	op s : -> System .
	eq (r3 \in cenc3(nw(s))) = true .
    eq key(r3) = intruder .
	red inv120(s,r3) implies inv160(s,n1) implies inv160(fkm31(s,r1,r2,r3),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher3 .
	op s : -> System .
	eq (r3 \in cenc3(nw(s))) = true .
    eq (key(r3) = intruder) = false .
	red inv160(s,n1) implies inv160(fkm31(s,r1,r2,r3),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher3 .
	op s : -> System .
	eq (r3 \in cenc3(nw(s))) = false .
	red inv160(s,n1) implies inv160(fkm31(s,r1,r2,r3),n1) .
close

-- fkm32 (all - true)
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    -- eq n1 = r3 . rewrite
	eq creator(n1) = creator(r3) .
    eq forwhom(n1) = forwhom(r3) .
    eq random(n1) = random(r3) .
	red inv160(s,n1) implies inv160(fkm32(s,r1,r2,r3),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    -- eq n1 = r3 . rewrite
	eq creator(n1) = creator(r3) .
    eq forwhom(n1) = forwhom(r3) .
    eq (random(n1) = random(r3)) = false .
	red inv160(s,n1) implies inv160(fkm32(s,r1,r2,r3),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    -- eq n1 = r3 . rewrite
	eq creator(n1) = creator(r3) .
    eq (forwhom(n1) = forwhom(r3)) = false .
	red inv160(s,n1) implies inv160(fkm32(s,r1,r2,r3),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    -- eq n1 = r3 . rewrite
	eq (creator(n1) = creator(r3)) = false .
	red inv160(s,n1) implies inv160(fkm32(s,r1,r2,r3),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq (r2 = intruder) = false .
	red inv160(s,n1) implies inv160(fkm32(s,r1,r2,r3),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv160(s,n1) implies inv160(fkm32(s,r1,r2,r3),n1) .
close

-- sdm1 ( all - true)
--> true
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = true .
	red inv160(s,n1) implies inv160(sdm1(s,r1,r2,r3),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = false .
    eq r2 = intruder .
    -- eq n1 = n(r1,intruder,r3) . rewrite
	eq creator(n1) = r1 .
    eq forwhom(n1) = intruder .
    eq random(n1) = r3 .
	red inv160(s,n1) implies inv160(sdm1(s,r1,r2,r3),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = false .
    eq r2 = intruder .

    eq creator(n1) = r1 .
    eq forwhom(n1) = intruder .
    eq (random(n1) = r3) = false .

	red inv160(s,n1) implies inv160(sdm1(s,r1,r2,r3),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = false .
    eq r2 = intruder .
	
    eq creator(n1) = r1 .
    eq (forwhom(n1) = intruder) = false .

	red inv160(s,n1) implies inv160(sdm1(s,r1,r2,r3),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = false .
    eq r2 = intruder .
	
    eq (creator(n1) = r1) = false .

	red inv160(s,n1) implies inv160(sdm1(s,r1,r2,r3),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = false .
    eq (r2 = intruder) = false .
	red inv160(s,n1) implies inv160(sdm1(s,r1,r2,r3),n1) .
close

-- -- sdm2 (not all true)
-- --> true
-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op s : -> System .
--   eq r3 \in nw(s) = true .
--   eq m1?(r3) = true .
--   eq receiver(r3) = r1 .
--   eq key(cipher1(r3)) = r1 .
--   eq principal(cipher1(r3)) = sender(r3) .
--   eq r2 \in ur(s) = true .
-- 	red inv160(s,n1) implies inv160(sdm2(s,r1,r2,r3),n1) .
-- close

-- --> true
-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op s : -> System .
--   eq r3 \in nw(s) = true .
--   eq m1?(r3) = true .
--   eq receiver(r3) = r1 .
--   eq key(cipher1(r3)) = r1 .
--   eq principal(cipher1(r3)) = sender(r3) .
--   eq r2 \in ur(s) = false .

--   eq (sender(r3) = intruder) = false .
-- 	red inv160(s,n1) implies inv160(sdm2(s,r1,r2,r3),n1) .
-- close

-- --> true
-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op s : -> System .
--   eq r3 \in nw(s) = true .
--   eq m1?(r3) = true .
--   eq receiver(r3) = r1 .
--   eq key(cipher1(r3)) = r1 .
--   eq principal(cipher1(r3)) = sender(r3) .
--   eq r2 \in ur(s) = false .
--   eq sender(r3) = intruder .
-- --   eq n1 = nonce(cipher1(r3)) .  
--   ** rewrite
--   eq creator(n1) = creator(nonce(cipher1(r3))) .
--   eq forwhom(n1) = forwhom(nonce(cipher1(r3))) .
--   eq random(n1) = random(nonce(cipher1(r3))) .
-- 	red inv160(s,n1) implies inv160(sdm2(s,r1,r2,r3),n1) .
-- close

-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op s : -> System .
--   eq r3 \in nw(s) = true .
--   eq m1?(r3) = true .
--   eq receiver(r3) = r1 .
--   eq key(cipher1(r3)) = r1 .
--   eq principal(cipher1(r3)) = sender(r3) .
--   eq r2 \in ur(s) = false .
--   eq sender(r3) = intruder .
-- --   eq n1 = nonce(cipher1(r3)) .  
--   ** rewrite
--   eq creator(n1) = creator(nonce(cipher1(r3))) .
--   eq forwhom(n1) = forwhom(nonce(cipher1(r3))) .
--   eq (random(n1) = random(nonce(cipher1(r3)))) = false .

--   eq creator(n1) = r1 .
--   eq forwhom(n1) = intruder .
--   eq random(n1) = r2 .

--   eq (r1 = intruder) = false .
-- 	red inv160(s,n1) implies inv160(sdm2(s,r1,r2,r3),n1) .
-- close

-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op s : -> System .
--   eq r3 \in nw(s) = true .
--   eq m1?(r3) = true .
--   eq receiver(r3) = r1 .
--   eq key(cipher1(r3)) = r1 .
--   eq principal(cipher1(r3)) = sender(r3) .
--   eq r2 \in ur(s) = false .
--   eq sender(r3) = intruder .
-- --   eq n1 = nonce(cipher1(r3)) .  
--   ** rewrite
--   eq creator(n1) = creator(nonce(cipher1(r3))) .
--   eq forwhom(n1) = forwhom(nonce(cipher1(r3))) .
--   eq (random(n1) = random(nonce(cipher1(r3)))) = false .

--   eq creator(n1) = r1 .
--   eq forwhom(n1) = intruder .
--   eq random(n1) = r2 .

--   eq (r1 = intruder) = true .
-- 	red inv160(s,n1) implies inv160(sdm2(s,r1,r2,r3),n1) .
-- close

-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op s : -> System .
--   eq r3 \in nw(s) = true .
--   eq m1?(r3) = true .
--   eq receiver(r3) = r1 .
--   eq key(cipher1(r3)) = r1 .
--   eq principal(cipher1(r3)) = sender(r3) .
--   eq r2 \in ur(s) = false .
--   eq sender(r3) = intruder .
-- --   eq n1 = nonce(cipher1(r3)) .  
--   ** rewrite
--   eq creator(n1) = creator(nonce(cipher1(r3))) .
--   eq forwhom(n1) = forwhom(nonce(cipher1(r3))) .
--   eq (random(n1) = random(nonce(cipher1(r3)))) = false .

--   eq creator(n1) = r1 .
--   eq forwhom(n1) = intruder .
--   eq (random(n1) = r2) = false .

-- 	red inv160(s,n1) implies inv160(sdm2(s,r1,r2,r3),n1) .
-- close

-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op s : -> System .
--   eq r3 \in nw(s) = true .
--   eq m1?(r3) = true .
--   eq receiver(r3) = r1 .
--   eq key(cipher1(r3)) = r1 .
--   eq principal(cipher1(r3)) = sender(r3) .
--   eq r2 \in ur(s) = false .
--   eq sender(r3) = intruder .
-- --   eq n1 = nonce(cipher1(r3)) .  
--   ** rewrite
--   eq creator(n1) = creator(nonce(cipher1(r3))) .
--   eq forwhom(n1) = forwhom(nonce(cipher1(r3))) .
--   eq (random(n1) = random(nonce(cipher1(r3)))) = false .

--   eq creator(n1) = r1 .
--   eq (forwhom(n1) = intruder) = false .
--   eq (r1 = intruder) = false .
--   	red inv160(s,n1) implies inv160(sdm2(s,r1,r2,r3),n1) .

-- close

-- -- long term
-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op s : -> System .
--   eq r3 \in nw(s) = true .
--   eq m1?(r3) = true .
--   eq receiver(r3) = r1 .
--   eq key(cipher1(r3)) = r1 .
--   eq principal(cipher1(r3)) = sender(r3) .
--   eq r2 \in ur(s) = false .
--   eq sender(r3) = intruder .
-- --   eq n1 = nonce(cipher1(r3)) .  
--   ** rewrite
--   eq creator(n1) = creator(nonce(cipher1(r3))) .
--   eq forwhom(n1) = forwhom(nonce(cipher1(r3))) .
--   eq (random(n1) = random(nonce(cipher1(r3)))) = false .

--   eq creator(n1) = r1 .
--   eq (forwhom(n1) = intruder) = false .
--   eq r1 = intruder .
-- --   eq cipher1(r3) \in cenc1(nw(s)) = true .

--   	-- red inv130(s,nonce(cipher1(r3)))
-- 	-- implies inv140(s,cipher1(r3))
-- 	-- implies inv160(s,n1) implies inv160(sdm2(s,r1,r2,r3),n1) .
--   	red inv160(s,n1) implies inv160(sdm2(s,r1,r2,r3),n1) .
-- close

-- -- long term
-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op s : -> System .
--   eq r3 \in nw(s) = true .
--   eq m1?(r3) = true .
--   eq receiver(r3) = r1 .
--   eq key(cipher1(r3)) = r1 .
--   eq principal(cipher1(r3)) = sender(r3) .
--   eq r2 \in ur(s) = false .
--   eq sender(r3) = intruder .
-- --   eq n1 = nonce(cipher1(r3)) .  
--   ** rewrite
--   eq creator(n1) = creator(nonce(cipher1(r3))) .
--   eq forwhom(n1) = forwhom(nonce(cipher1(r3))) .
--   eq (random(n1) = random(nonce(cipher1(r3)))) = false .

--   eq (creator(n1) = r1) = false .
-- --   eq (r1 = intruder) = false .
-- --   eq cipher1(r3) \in cenc1(nw(s)) = true .
-- --   	red inv130(s,nonce(cipher1(r3)))
-- -- 	implies inv140(s,cipher1(r3))
-- -- 	implies inv160(s,n1) implies inv160(sdm2(s,r1,r2,r3),n1) .
--   	red inv160(s,n1) implies inv160(sdm2(s,r1,r2,r3),n1) .
-- close

-- -- long term
-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op s : -> System .
--   eq r3 \in nw(s) = true .
--   eq m1?(r3) = true .
--   eq receiver(r3) = r1 .
--   eq key(cipher1(r3)) = r1 .
--   eq principal(cipher1(r3)) = sender(r3) .
--   eq r2 \in ur(s) = false .
--   eq sender(r3) = intruder .
-- --   eq n1 = nonce(cipher1(r3)) .  
--   ** rewrite
--   eq creator(n1) = creator(nonce(cipher1(r3))) .
--   eq (forwhom(n1) = forwhom(nonce(cipher1(r3)))) = false .
-- --   eq r1 = intruder .
-- --   eq cipher1(r3) \in cenc1(nw(s)) = true .
-- --   	red inv130(s,nonce(cipher1(r3)))
-- -- 	implies inv140(s,cipher1(r3))
-- -- 	implies inv160(s,n1) implies inv160(sdm2(s,r1,r2,r3),n1) .
--   	red inv160(s,n1) implies inv160(sdm2(s,r1,r2,r3),n1) .
-- close

-- -- long term
-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op s : -> System .
--   eq r3 \in nw(s) = true .
--   eq m1?(r3) = true .
--   eq receiver(r3) = r1 .
--   eq key(cipher1(r3)) = r1 .
--   eq principal(cipher1(r3)) = sender(r3) .
--   eq r2 \in ur(s) = false .
--   eq sender(r3) = intruder .

--   eq (creator(n1) = creator(nonce(cipher1(r3)))) = false .
--   	red inv160(s,n1) implies inv160(sdm2(s,r1,r2,r3),n1) .
-- close

-- -- true
-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op s : -> System .
--   eq r3 \in nw(s) = true .
--   eq m1?(r3) = true .
--   eq receiver(r3) = r1 .
--   eq key(cipher1(r3)) = r1 .
--   eq (principal(cipher1(r3)) = sender(r3)) = false .
-- 	red inv160(s,n1) implies inv160(sdm2(s,r1,r2,r3),n1) .
-- close

-- -- true
-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op s : -> System .
--   eq r3 \in nw(s) = true .
--   eq m1?(r3) = true .
--   eq receiver(r3) = r1 .
--   eq (key(cipher1(r3)) = r1) = false .
-- 	red inv160(s,n1) implies inv160(sdm2(s,r1,r2,r3),n1) .
-- close

-- -- true
-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op s : -> System .
--   eq r3 \in nw(s) = true .
--   eq m1?(r3) = true .
--   eq (receiver(r3) = r1) = false .
-- 	red inv160(s,n1) implies inv160(sdm2(s,r1,r2,r3),n1) .
-- close

-- -- true
-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op s : -> System .
--   eq r3 \in nw(s) = true .
--   eq m1?(r3) = false .
-- 	red inv160(s,n1) implies inv160(sdm2(s,r1,r2,r3),n1) .
-- close

-- -- true
-- open INV .
--   :id(nslpk1)
-- 	op n1 : -> Nonce .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op s : -> System .
--   eq r3 \in nw(s) = false .
-- 	red inv160(s,n1) implies inv160(sdm2(s,r1,r2,r3),n1) .
-- close

-- sdm3 (all - true)
--> true

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq forwhom(nonce(cipher1(r3))) = sender(r4) .
    eq random(nonce(cipher1(r3))) = r2 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq principal(cipher2(r4)) = sender(r4) .
    eq creator(nonce1(cipher2(r4))) = r1 .
	eq forwhom(nonce1(cipher2(r4))) = sender(r4) .
	eq random(nonce1(cipher2(r4))) = r2 .

    eq sender(r4) = intruder .
    -- eq n1 = nonce2(cipher2(r4)) .
    eq creator(n1) = creator(nonce2(cipher2(r4))) .
    eq forwhom(n1) = forwhom(nonce2(cipher2(r4))) .
    eq random(n1) = random(nonce2(cipher2(r4))) .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq forwhom(nonce(cipher1(r3))) = sender(r4) .
    eq random(nonce(cipher1(r3))) = r2 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq principal(cipher2(r4)) = sender(r4) .
    eq creator(nonce1(cipher2(r4))) = r1 .
	eq forwhom(nonce1(cipher2(r4))) = sender(r4) .
	eq random(nonce1(cipher2(r4))) = r2 .

    eq sender(r4) = intruder .
    -- eq n1 = nonce2(cipher2(r4)) .
    eq creator(n1) = creator(nonce2(cipher2(r4))) .
    eq forwhom(n1) = forwhom(nonce2(cipher2(r4))) .
    eq (random(n1) = random(nonce2(cipher2(r4)))) = false .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq forwhom(nonce(cipher1(r3))) = sender(r4) .
    eq random(nonce(cipher1(r3))) = r2 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq principal(cipher2(r4)) = sender(r4) .
    eq creator(nonce1(cipher2(r4))) = r1 .
	eq forwhom(nonce1(cipher2(r4))) = sender(r4) .
	eq random(nonce1(cipher2(r4))) = r2 .

    eq sender(r4) = intruder .
    -- eq n1 = nonce2(cipher2(r4)) .
    eq creator(n1) = creator(nonce2(cipher2(r4))) .
    eq (forwhom(n1) = forwhom(nonce2(cipher2(r4)))) = false .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq forwhom(nonce(cipher1(r3))) = sender(r4) .
    eq random(nonce(cipher1(r3))) = r2 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq principal(cipher2(r4)) = sender(r4) .
    eq creator(nonce1(cipher2(r4))) = r1 .
	eq forwhom(nonce1(cipher2(r4))) = sender(r4) .
	eq random(nonce1(cipher2(r4))) = r2 .

    eq sender(r4) = intruder .
    -- eq n1 = nonce2(cipher2(r4)) .
    eq (creator(n1) = creator(nonce2(cipher2(r4)))) = false .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq forwhom(nonce(cipher1(r3))) = sender(r4) .
    eq random(nonce(cipher1(r3))) = r2 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq principal(cipher2(r4)) = sender(r4) .
    eq creator(nonce1(cipher2(r4))) = r1 .
	eq forwhom(nonce1(cipher2(r4))) = sender(r4) .
	eq random(nonce1(cipher2(r4))) = r2 .

    eq (sender(r4) = intruder) = false .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq forwhom(nonce(cipher1(r3))) = sender(r4) .
    eq random(nonce(cipher1(r3))) = r2 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq principal(cipher2(r4)) = sender(r4) .
    eq creator(nonce1(cipher2(r4))) = r1 .
	eq forwhom(nonce1(cipher2(r4))) = sender(r4) .
	eq (random(nonce1(cipher2(r4))) = r2) = false .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq forwhom(nonce(cipher1(r3))) = sender(r4) .
    eq random(nonce(cipher1(r3))) = r2 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq principal(cipher2(r4)) = sender(r4) .
    eq creator(nonce1(cipher2(r4))) = r1 .
	eq (forwhom(nonce1(cipher2(r4))) = sender(r4)) = false .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq forwhom(nonce(cipher1(r3))) = sender(r4) .
    eq random(nonce(cipher1(r3))) = r2 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq principal(cipher2(r4)) = sender(r4) .
    eq (creator(nonce1(cipher2(r4))) = r1) = false .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq forwhom(nonce(cipher1(r3))) = sender(r4) .
    eq random(nonce(cipher1(r3))) = r2 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq (principal(cipher2(r4)) = sender(r4)) = false .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq forwhom(nonce(cipher1(r3))) = sender(r4) .
    eq random(nonce(cipher1(r3))) = r2 .
    eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq forwhom(nonce(cipher1(r3))) = sender(r4) .
    eq random(nonce(cipher1(r3))) = r2 .
    eq (receiver(r4) = r1) = false .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq forwhom(nonce(cipher1(r3))) = sender(r4) .
    eq (random(nonce(cipher1(r3))) = r2) = false .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq creator(nonce(cipher1(r3))) = r1 .
    eq (forwhom(nonce(cipher1(r3))) = sender(r4)) = false .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq principal(cipher1(r3)) = r1 .
	eq (creator(nonce(cipher1(r3))) = r1) = false .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
    eq (principal(cipher1(r3)) = r1) = false .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq (key(cipher1(r3)) = sender(r4)) = false .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq (receiver(r3) = sender(r4)) = false .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq (sender(r3) = r1) = false .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
  :id(nslpk1)
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = false .
	red inv160(s,n1) implies inv160(sdm3(s,r1,r2,r3,r4),n1) .
close

open INV .
  :proof(nslpk1)
close