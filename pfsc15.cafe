open INV .
	:goal{
		eq [inv10 :nonexec] : inv100(S:System,C1:Cipher1) = true .
		eq [inv11 :nonexec] : inv110(S:System,C2:Cipher2) = true .
		eq [inv12 :nonexec] : inv120(S:System,C3:Cipher3) = true .
		eq [inv15 :nonexec] : inv150(S:System,C2:Cipher2) = true .
		eq [inv16 :nonexec] : inv160(S:System,N:Nonce) = true .

	}

	:ind on (S:System)
	:apply(si)

-- fkm11, ignore 10,11,12
  :apply(tc)
  :postpone .
  :postpone .
  :postpone .

	:def csb1 = :ctf [C#Cipher1 \in cenc1(nw(S#System)) .]
	:apply(csb1)

	:def csb2 = :ctf {eq key(C#Cipher1) = intruder .}
	:apply(csb2)

	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}
	:imp [inv10] by {C1:Cipher1 <- C#Cipher1 ;}
	:apply (rd)

	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}
	:apply (rd)

	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}
	:apply (rd)

  :postpone .

-- fkm12, ignore 10,11,12
  :apply(tc)
  :postpone .
  :postpone .
  :postpone .

	:def csb4 = :ctf [N#Nonce \in cnonce(nw(S#System)) .]

	:apply(csb4)

	:def csb6 = :ctf {eq P0#Principal = intruder .}

	:apply(csb6)

	:def csb7 = :ctf {eq nonce2(C2@Cipher2) = N#Nonce .}

	:apply(csb7)

	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

	:apply (rd)

	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

	:apply (rd)

    :imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

	:apply (rd)

  :postpone .

-- fkm21, ignore 10,11,12
  :apply(tc)
  :postpone .
  :postpone .
  :postpone .

	:def csb10 = :ctf [C#Cipher2 \in cenc2(nw(S#System)) .]

	:apply(csb10)

	:def csb11 = :ctf {eq key(C#Cipher2) = intruder .}

	:apply(csb11)

	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}
	:imp [inv11] by {C2:Cipher2 <- C#Cipher2 ;}
	:apply (rd)

    :def csb111 = :ctf {eq C2@Cipher2 = C#Cipher2 .}

	:apply(csb111)

	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}
	:apply (rd)

	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}
	:apply (rd)

    :imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}
	:apply (rd)

  :postpone .

-- -- fkm22, ignore 10,11,12
--   :apply(tc)
--   :postpone .
--   :postpone .
--   :postpone .

-- 	:def csb12 = :ctf [N#Nonce \in cnonce(nw(S#System)) .]

-- 	:apply(csb12)

-- 	:def csb13 = :ctf [N0#Nonce \in cnonce(nw(S#System)) .]

-- 	:apply(csb13)

--     :def csb14 = :ctf {eq C2@Cipher2 = enc2(P0#Principal,N#Nonce,N0#Nonce,P#Principal) .}

-- 	:apply(csb14)

--     :def csb15 = :ctf {eq P#Principal = intruder .}

-- 	:apply(csb15)

-- 	:def csb16 = :ctf {eq P0#Principal = intruder .}

-- 	:apply(csb16)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

--     :imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

--     :imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

--     :def csb17 = :ctf {eq P0#Principal = intruder .}

-- 	:apply(csb17)

--     :def csb18 = :ctf {eq nonce2(C2@Cipher2) = N#Nonce .}

-- 	:apply(csb18)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

--     :def csb19 = :ctf {eq nonce2(C2@Cipher2) = N0#Nonce .}

-- 	:apply(csb19)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

--   :postpone .

-- -- fkm31, ignore 10,11,12
--   :apply(tc)
--   :postpone .
--   :postpone .
--   :postpone .

-- 	:def csb20 = :ctf [C#Cipher3 \in cenc3(nw(S#System)) .]

-- 	:apply(csb20)

-- 	:def csb21 = :ctf {eq key(C#Cipher3) = intruder .}

-- 	:apply(csb21)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}
-- 	:imp [inv12] by {C3:Cipher3 <- C#Cipher3 ;}
-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}
-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}
-- 	:apply (rd)

--   :postpone .

-- -- fkm32, ignore 10,11,12
--   :apply(tc)
--   :postpone .
--   :postpone .
--   :postpone .

-- 	:def csb22 = :ctf [N#Nonce \in cnonce(nw(S#System)) .]

-- 	:apply(csb22)

-- 	:def csb23 = :ctf {eq P0#Principal = intruder .}

-- 	:apply(csb23)

-- 	:def csb24 = :ctf {eq nonce2(C2@Cipher2) = N#Nonce .}

-- 	:apply(csb24)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

--   :postpone .

-- -- init
-- 	:apply(tc)
-- 	:apply (rd)
-- 	:apply (rd)
-- 	:apply (rd)
-- 	:apply (rd)
-- 	:apply (rd)

-- -- sdm1, ignore 10,11,12
--   :apply(tc)
--   :postpone .
--   :postpone .
--   :postpone .

-- 	:def csb25 = :ctf [R#Random \in ur(S#System) .]

-- 	:apply(csb25)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:def csb26 = :ctf {eq P0#Principal = intruder .}

-- 	:apply(csb26)

-- 	:def csb27 = :ctf {eq nonce2(C2@Cipher2) = n(P#Principal,intruder,R#Random) .}

-- 	:apply(csb27)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

--   :postpone .

-- -- sdm2, ignore 10,11,12
--   :apply(tc)
--   :postpone .
--   :postpone .
--   :postpone .

-- 	:def csb29 = :ctf [M#Message \in nw(S#System) .]

-- 	:apply(csb29)

-- 	:def csb30 = :ctf [m1?(M#Message) .]

-- 	:apply(csb30)

-- 	:def csb31 = :ctf {eq receiver(M#Message) = P#Principal .}

-- 	:apply(csb31)

-- 	:def csb32 = :ctf {eq key(cipher1(M#Message)) = P#Principal .}

-- 	:apply(csb32)

-- 	:def csb33 = :ctf {eq principal(cipher1(M#Message)) = sender(M#Message) .}

-- 	:apply(csb33)

-- 	:def csb34 = :ctf [R#Random \in ur(S#System) .]

-- 	:apply(csb34)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:def csb35 = :ctf {eq C2@Cipher2 = enc2(sender(M#Message),nonce(cipher1(M#Message)),n(P#Principal,sender(M#Message),R#Random),P#Principal) .}

-- 	:apply(csb35)

-- 	:def csb36 = :ctf {eq sender(M#Message) = intruder .}

-- 	:apply(csb36)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:def csb37 = :ctf {eq P#Principal = intruder .}

-- 	:apply(csb37)

--     :def csb38 = :ctf [n(intruder,sender(M#Message),R#Random) \in cnonce(nw(S#System)) .]

-- 	:apply(csb38)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}
--     :imp [inv16] by {N:Nonce <- n(intruder,sender(M#Message),R#Random) ;}
-- 	:apply (rd)

--     :imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}
--     :imp [inv16] by {N:Nonce <- n(intruder,sender(M#Message),R#Random) ;}
-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

--     :def csb39 = :ctf {eq sender(M#Message) = intruder .}

-- 	:apply(csb39)

--     :def csb40 = :ctf {eq nonce2(C2@Cipher2) = nonce(cipher1(M#Message)) .}

-- 	:apply(csb40)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

--     :def csb41 = :ctf {eq nonce2(C2@Cipher2) = n(P#Principal,intruder,R#Random) .}

-- 	:apply(csb41)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

--     :imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

--     :imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

--     :imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

--   :postpone .

-- -- sdm3, ignore 10,11,12
--   :apply(tc)
--   :postpone .
--   :postpone .
--   :postpone .

-- 	:def csb42 = :ctf [M#Message \in nw(S#System) .]

-- 	:apply(csb42)

-- 	:def csb43 = :ctf [M0#Message \in nw(S#System) .]

-- 	:apply(csb43)

-- 	:def csb44 = :ctf [m1?(M#Message) .]

-- 	:apply(csb44)

-- 	:def csb45 = :ctf [m2?(M0#Message) .]

-- 	:apply(csb45)

-- 	:def csb46 = :ctf {eq creator(M#Message) = P#Principal .}

-- 	:apply(csb46)

-- 	:def csb47 = :ctf {eq sender(M#Message) = P#Principal .}

-- 	:apply(csb47)

-- 	:def csb48 = :ctf {eq receiver(M#Message) = sender(M0#Message) .}

-- 	:apply(csb48)

-- 	:def csb49 = :ctf {eq key(cipher1(M#Message)) = sender(M0#Message) .}

-- 	:apply(csb49)

-- 	:def csb50 = :ctf {eq nonce(cipher1(M#Message)) = n(P#Principal,sender(M0#Message),R#Random) .}

-- 	:apply(csb50)

-- 	:def csb51 = :ctf {eq principal(cipher1(M#Message)) = P#Principal .}

-- 	:apply(csb51)

-- 	:def csb52 = :ctf {eq receiver(M0#Message) = P#Principal .}

-- 	:apply(csb52)

-- 	:def csb53 = :ctf {eq key(cipher2(M0#Message)) = P#Principal .}

-- 	:apply(csb53)

-- 	:def csb54 = :ctf {eq nonce1(cipher2(M0#Message)) = n(P#Principal,sender(M0#Message),R#Random) .}

-- 	:apply(csb54)

-- 	:def csb55 = :ctf {eq principal(cipher2(M0#Message)) = sender(M0#Message) .}

-- 	:apply(csb55)

-- 	:def csb56 = :ctf {eq sender(M0#Message) = intruder .}

-- 	:apply(csb56)

-- 	:def csb57 = :ctf {eq nonce2(C2@Cipher2) = nonce2(cipher2(M0#Message)) .}

-- 	:apply(csb57)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

-- 	:imp [inv15] by {C2:Cipher2 <- C2@Cipher2 ;}

-- 	:apply (rd)

--   :postpone .

close