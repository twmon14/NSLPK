--> true
open INV .
	op n1 : -> Nonce .
	op s : -> System .
	red inv130(init,n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher1 .
	op s : -> System .
	eq (r3 \in cenc1(nw(s))) = true .
	eq key(r3) = intruder .
	red inv100(s,r3) implies inv130(s,n1) implies inv130(fkm11(s,r1,r2,r3),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher1 .
	op s : -> System .
	eq (r3 \in cenc1(nw(s))) = true .
	eq (key(r3) = intruder) = false .
	red inv130(s,n1) implies inv130(fkm11(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher1 .
	op s : -> System .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv130(s,n1) implies inv130(fkm11(s,r1,r2,r3),n1) .
close

--> fkm12
--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
  eq creator(n1) = creator(r3) .
  eq forwhom(n1) = forwhom(r3) .
  eq random(n1) = random(r3) .
	red lm1(r3,n1,cnonce(nw(s))) implies inv130(s,n1) implies inv130(fkm12(s,r1,r2,r3),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
  eq creator(n1) = creator(r3) .
  eq forwhom(n1) = forwhom(r3) .
  eq (random(n1) = random(r3)) = false .
	red inv130(s,n1) implies inv130(fkm12(s,r1,r2,r3),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
  eq creator(n1) = creator(r3) .
  eq (forwhom(n1) = forwhom(r3)) = false .
	red inv130(s,n1) implies inv130(fkm12(s,r1,r2,r3),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
  eq (creator(n1) = creator(r3)) = false .
	red inv130(s,n1) implies inv130(fkm12(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv130(s,n1) implies inv130(fkm12(s,r1,r2,r3),n1) .
close

--> fkm21
--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher2 .
	op s : -> System .
	eq (r3 \in cenc2(nw(s))) = true .
	eq key(r3) = intruder .
	red inv110(s,r3) implies inv130(s,n1) implies inv130(fkm21(s,r1,r2,r3),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher2 .
	op s : -> System .
	eq (r3 \in cenc2(nw(s))) = true .
	eq (key(r3) = intruder) = false .
	red inv130(s,n1) implies inv130(fkm21(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher2 .
	op s : -> System .
	eq (r3 \in cenc2(nw(s))) = false .
	red inv130(s,n1) implies inv130(fkm21(s,r1,r2,r3),n1) .
close

--> fkm22
--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  eq creator(r3) = creator(n1) .
  eq forwhom(r3) = forwhom(n1) .
  eq random(r3) = random(n1) .
	red lm1(r3,n1,cnonce(nw(s))) implies inv130(s,n1) implies inv130(fkm22(s,r1,r2,r3,r4),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  eq creator(r3) = creator(n1) .
  eq forwhom(r3) = forwhom(n1) .
  eq (random(r3) = random(n1)) = false .
  eq creator(r4) = creator(n1) .
  eq forwhom(r4) = forwhom(n1) .
  eq random(r4) = random(n1) .
	red lm1(r4,n1,cnonce(nw(s))) implies inv130(s,n1) implies inv130(fkm22(s,r1,r2,r3,r4),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  eq creator(r3) = creator(n1) .
  eq forwhom(r3) = forwhom(n1) .
  eq (random(r3) = random(n1)) = false .
  eq creator(r4) = creator(n1) .
  eq forwhom(r4) = forwhom(n1) .
  eq (random(r4) = random(n1)) = false .
	red inv130(s,n1) implies inv130(fkm22(s,r1,r2,r3,r4),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  eq creator(r3) = creator(n1) .
  eq forwhom(r3) = forwhom(n1) .
  eq (random(r3) = random(n1)) = false .
  eq creator(r4) = creator(n1) .
  eq (forwhom(r4) = forwhom(n1)) = false .
	red inv130(s,n1) implies inv130(fkm22(s,r1,r2,r3,r4),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  eq creator(r3) = creator(n1) .
  eq forwhom(r3) = forwhom(n1) .
  eq (random(r3) = random(n1)) = false .
  eq (creator(r4) = creator(n1)) = false .
	red inv130(s,n1) implies inv130(fkm22(s,r1,r2,r3,r4),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  eq creator(r3) = creator(n1) .
  eq (forwhom(r3) = forwhom(n1)) = false .
  eq creator(r4) = creator(n1) .
  eq forwhom(r4) = forwhom(n1) .
  eq random(r4) = random(n1) .
	red lm1(r4,n1,cnonce(nw(s))) implies inv130(s,n1) implies inv130(fkm22(s,r1,r2,r3,r4),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  eq creator(r3) = creator(n1) .
  eq (forwhom(r3) = forwhom(n1)) = false .
  eq creator(r4) = creator(n1) .
  eq forwhom(r4) = forwhom(n1) .
  eq (random(r4) = random(n1)) = false .
	red inv130(s,n1) implies inv130(fkm22(s,r1,r2,r3,r4),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  eq creator(r3) = creator(n1) .
  eq (forwhom(r3) = forwhom(n1)) = false .
  eq creator(r4) = creator(n1) .
  eq (forwhom(r4) = forwhom(n1)) = false .
	red inv130(s,n1) implies inv130(fkm22(s,r1,r2,r3,r4),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  eq creator(r3) = creator(n1) .
  eq (forwhom(r3) = forwhom(n1)) = false .
  eq (creator(r4) = creator(n1)) = false .
	red inv130(s,n1) implies inv130(fkm22(s,r1,r2,r3,r4),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  eq (creator(r3) = creator(n1)) = false .
	eq creator(r4) = creator(n1) .
  eq forwhom(r4) = forwhom(n1) .
  eq random(r4) = random(n1) .
	red lm1(r4,n1,cnonce(nw(s))) implies inv130(s,n1) implies inv130(fkm22(s,r1,r2,r3,r4),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  eq (creator(r3) = creator(n1)) = false .
	eq creator(r4) = creator(n1) .
  eq forwhom(r4) = forwhom(n1) .
  eq (random(r4) = random(n1)) = false .
	red inv130(s,n1) implies inv130(fkm22(s,r1,r2,r3,r4),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  eq (creator(r3) = creator(n1)) = false .
	eq creator(r4) = creator(n1) .
  eq (forwhom(r4) = forwhom(n1)) = false .
	red inv130(s,n1) implies inv130(fkm22(s,r1,r2,r3,r4),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
  eq (creator(r3) = creator(n1)) = false .
	eq (creator(r4) = creator(n1)) = false .
	red inv130(s,n1) implies inv130(fkm22(s,r1,r2,r3,r4),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = false .
	red inv130(s,n1) implies inv130(fkm22(s,r1,r2,r3,r4),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv130(s,n1) implies inv130(fkm22(s,r1,r2,r3,r4),n1) .
close

--> fkm31
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher3 .
	op s : -> System .
	eq (r3 \in cenc3(nw(s))) = true .
	eq key(r3) = intruder .
	red inv120(s,r3) implies inv130(s,n1) implies inv130(fkm31(s,r1,r2,r3),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher3 .
	op s : -> System .
	eq (r3 \in cenc3(nw(s))) = true .
	eq (key(r3) = intruder) = false .
	red inv130(s,n1) implies inv130(fkm31(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher3 .
	op s : -> System .
	eq (r3 \in cenc3(nw(s))) = false .
	red inv130(s,n1) implies inv130(fkm31(s,r1,r2,r3),n1) .
close

--> fkm32
--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
  eq creator(r3) = creator(n1) .
  eq forwhom(r3) = forwhom(n1) .
  eq random(r3) = random(n1) .
	red lm1(r3,n1,cnonce(nw(s))) implies inv130(s,n1) implies inv130(fkm32(s,r1,r2,r3),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
  eq creator(r3) = creator(n1) .
  eq forwhom(r3) = forwhom(n1) .
  eq (random(r3) = random(n1)) = false .
	red inv130(s,n1) implies inv130(fkm32(s,r1,r2,r3),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
  eq creator(r3) = creator(n1) .
  eq (forwhom(r3) = forwhom(n1)) = false .
	red inv130(s,n1) implies inv130(fkm32(s,r1,r2,r3),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
  eq (creator(r3) = creator(n1)) = false .
	red inv130(s,n1) implies inv130(fkm32(s,r1,r2,r3),n1) .
close

open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv130(s,n1) implies inv130(fkm32(s,r1,r2,r3),n1) .
close

--> sdm1
--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = true .
	red inv130(s,n1) implies inv130(sdm1(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = false .
  eq creator(n1) = r1 .
  eq forwhom(n1) = r2 .
  eq random(n1) = r3 .
  eq r1 = intruder .
  red inv130(s,n1) implies inv130(sdm1(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = false .
  eq creator(n1) = r1 .
  eq forwhom(n1) = r2 .
  eq random(n1) = r3 .
  eq (r1 = intruder) = false .
  eq r2 = intruder .
  red inv130(s,n1) implies inv130(sdm1(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = false .
  eq creator(n1) = r1 .
  eq forwhom(n1) = r2 .
  eq random(n1) = r3 .
  eq (r1 = intruder) = false .
  eq (r2 = intruder) = false .
  red inv130(s,n1) implies inv130(sdm1(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = false .
  eq creator(n1) = r1 .
  eq forwhom(n1) = r2 .
  eq (random(n1) = r3) = false .
  red inv130(s,n1) implies inv130(sdm1(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = false .
  eq creator(n1) = r1 .
  eq (forwhom(n1) = r2) = false .
  red inv130(s,n1) implies inv130(sdm1(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = false .
  eq (creator(n1) = r1) = false .
  red inv130(s,n1) implies inv130(sdm1(s,r1,r2,r3),n1) .
close

-- sdm2
--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
	eq (r2 \in ur(s)) = true .
	red inv130(s,n1) implies inv130(sdm2(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
	eq (r2 \in ur(s)) = false .
  eq principal(cipher1(r3)) = sender(r3) .
  eq sender(r3) = intruder .
  eq forwhom(n1) = intruder .
  eq creator(n1) = r1 .
  eq random(n1) = r2 .
	red inv130(s,n1) implies inv130(sdm2(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
	eq (r2 \in ur(s)) = false .
  eq principal(cipher1(r3)) = sender(r3) .
  eq sender(r3) = intruder .
  eq forwhom(n1) = intruder .
  eq creator(n1) = r1 .
  eq (random(n1) = r2) = false .
	red inv130(s,n1) implies inv130(sdm2(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
	eq (r2 \in ur(s)) = false .
  eq principal(cipher1(r3)) = sender(r3) .
  eq sender(r3) = intruder .
  eq forwhom(n1) = intruder .
  eq (creator(n1) = r1) = false .
	red inv130(s,n1) implies inv130(sdm2(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
	eq (r2 \in ur(s)) = false .
  eq principal(cipher1(r3)) = sender(r3) .
  eq sender(r3) = intruder .
  eq (forwhom(n1) = intruder) = false .
  -- eq n = nonce(cipher1(r3)) ** rewrite
  eq creator(nonce(cipher1(r3))) = creator(n1) .
  eq forwhom(nonce(cipher1(r3))) = forwhom(n1) .
  eq random(nonce(cipher1(r3))) = random(n1) .
  eq r1 = intruder .
	red lm2(n1,r3,nw(s)) implies inv130(s,n1) implies inv130(sdm2(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  op nw' : -> Network .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
	eq (r2 \in ur(s)) = false .
  eq principal(cipher1(r3)) = sender(r3) .
  eq sender(r3) = intruder .
  eq (forwhom(n1) = intruder) = false .
  eq creator(nonce(cipher1(r3))) = creator(n1) .
  eq forwhom(nonce(cipher1(r3))) = forwhom(n1) .
  eq random(nonce(cipher1(r3))) = random(n1) .
  eq (r1 = intruder) = false .
  eq cipher1(r3) \in cenc1(nw(s)) = true .
	red lm1(nonce(cipher1(r3)),n1,cnonce(nw(s))) implies inv140(s,cipher1(r3)) 
    implies inv130(s,n1) implies inv130(sdm2(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  op nw' : -> Network .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
	eq (r2 \in ur(s)) = false .
  eq principal(cipher1(r3)) = sender(r3) .
  eq sender(r3) = intruder .
  eq (forwhom(n1) = intruder) = false .
  eq creator(nonce(cipher1(r3))) = creator(n1) .
  eq forwhom(nonce(cipher1(r3))) = forwhom(n1) .
  eq random(nonce(cipher1(r3))) = random(n1) .
  eq (r1 = intruder) = false .
  eq cipher1(r3) \in cenc1(nw(s)) = false .
	red lm3(cipher1(r3),r3,nw(s)) implies inv130(s,n1) implies inv130(sdm2(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  op nw' : -> Network .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
	eq (r2 \in ur(s)) = false .
  eq principal(cipher1(r3)) = sender(r3) .
  eq sender(r3) = intruder .
  eq (forwhom(n1) = intruder) = false .
  eq creator(nonce(cipher1(r3))) = creator(n1) .
  eq forwhom(nonce(cipher1(r3))) = forwhom(n1) .
  eq (random(nonce(cipher1(r3))) = random(n1)) = false .
	red inv130(s,n1) implies inv130(sdm2(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  op nw' : -> Network .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
	eq (r2 \in ur(s)) = false .
  eq principal(cipher1(r3)) = sender(r3) .
  eq sender(r3) = intruder .
  eq (forwhom(n1) = intruder) = false .
  eq creator(nonce(cipher1(r3))) = creator(n1) .
  eq (forwhom(nonce(cipher1(r3))) = forwhom(n1)) = false .
	red inv130(s,n1) implies inv130(sdm2(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  op nw' : -> Network .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
	eq (r2 \in ur(s)) = false .
  eq principal(cipher1(r3)) = sender(r3) .
  eq sender(r3) = intruder .
  eq (forwhom(n1) = intruder) = false .
  eq (creator(nonce(cipher1(r3))) = creator(n1)) = false .
	red inv130(s,n1) implies inv130(sdm2(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
	eq (r2 \in ur(s)) = false .
  eq principal(cipher1(r3)) = sender(r3) .
  eq (sender(r3) = intruder) = false .
	red inv130(s,n1) implies inv130(sdm2(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq receiver(r3) = r1 .
	eq (r2 \in ur(s)) = false .
  eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv130(s,n1) implies inv130(sdm2(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq key(cipher1(r3)) = r1 .
	eq (receiver(r3) = r1) = false .
	red inv130(s,n1) implies inv130(sdm2(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = true .
	eq (key(cipher1(r3)) = r1) = false .
	red inv130(s,n1) implies inv130(sdm2(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
	eq m1?(r3) = true .
	eq (r3 \in nw(s)) = false .
	red inv130(s,n1) implies inv130(sdm2(s,r1,r2,r3),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
	eq m1?(r3) = false .
	red inv130(s,n1) implies inv130(sdm2(s,r1,r2,r3),n1) .
close

-- sdm3
--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  -- eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq creator(nonce(cipher1(r3))) = r1 .
	eq forwhom(nonce(cipher1(r3))) = sender(r4) .
	eq random(nonce(cipher1(r3))) = r2 .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  -- eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
  eq creator(nonce1(cipher2(r4))) = r1 .
	eq forwhom(nonce1(cipher2(r4))) = sender(r4) .
	eq random(nonce1(cipher2(r4))) = r2 .
	eq principal(cipher2(r4)) = sender(r4) .
-- 
  eq sender(r4) = intruder .
  -- eq n1 = nonce2(cipher2(r4)) .
  eq creator(nonce2(cipher2(r4))) = creator(n1) .
  eq forwhom(nonce2(cipher2(r4))) = forwhom(n1) .
  eq random(nonce2(cipher2(r4))) = random(n1) .
  eq r1 = intruder .

	red lm1(nonce2(cipher2(r4)),n1,cnonce(r4))
    implies lm2(n1,r4,nw(s))
    implies inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  -- eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq creator(nonce(cipher1(r3))) = r1 .
	eq forwhom(nonce(cipher1(r3))) = sender(r4) .
	eq random(nonce(cipher1(r3))) = r2 .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  -- eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
  eq creator(nonce1(cipher2(r4))) = r1 .
	eq forwhom(nonce1(cipher2(r4))) = sender(r4) .
	eq random(nonce1(cipher2(r4))) = r2 .
	eq principal(cipher2(r4)) = sender(r4) .
-- 
  eq sender(r4) = intruder .
  -- eq n1 = nonce2(cipher2(r4)) .
  eq creator(nonce2(cipher2(r4))) = creator(n1) .
  eq forwhom(nonce2(cipher2(r4))) = forwhom(n1) .
  eq random(nonce2(cipher2(r4))) = random(n1) .
  eq (r1 = intruder) = false .
  eq nonce2(cipher2(r4)) \in cnonce(nw(s)) = true .

  red lm1(nonce2(cipher2(r4)),n1,cnonce(nw(s)))
    implies inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  -- eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq creator(nonce(cipher1(r3))) = r1 .
	eq forwhom(nonce(cipher1(r3))) = sender(r4) .
	eq random(nonce(cipher1(r3))) = r2 .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  -- eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
  eq creator(nonce1(cipher2(r4))) = r1 .
	eq forwhom(nonce1(cipher2(r4))) = sender(r4) .
	eq random(nonce1(cipher2(r4))) = r2 .
	eq principal(cipher2(r4)) = sender(r4) .
-- 
  eq sender(r4) = intruder .
  -- eq n1 = nonce2(cipher2(r4)) .
  eq creator(nonce2(cipher2(r4))) = creator(n1) .
  eq forwhom(nonce2(cipher2(r4))) = forwhom(n1) .
  eq random(nonce2(cipher2(r4))) = random(n1) .
  eq (r1 = intruder) = false .
  eq nonce2(cipher2(r4)) \in cnonce(nw(s)) = false .
  eq cipher2(r4) \in cenc2(nw(s)) = true .

  red inv150(s,cipher2(r4))
    implies inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  -- eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq creator(nonce(cipher1(r3))) = r1 .
	eq forwhom(nonce(cipher1(r3))) = sender(r4) .
	eq random(nonce(cipher1(r3))) = r2 .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  -- eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
  eq creator(nonce1(cipher2(r4))) = r1 .
	eq forwhom(nonce1(cipher2(r4))) = sender(r4) .
	eq random(nonce1(cipher2(r4))) = r2 .
	eq principal(cipher2(r4)) = sender(r4) .
-- 
  eq sender(r4) = intruder .
  -- eq n1 = nonce2(cipher2(r4)) .
  eq creator(nonce2(cipher2(r4))) = creator(n1) .
  eq forwhom(nonce2(cipher2(r4))) = forwhom(n1) .
  eq random(nonce2(cipher2(r4))) = random(n1) .
  eq (r1 = intruder) = false .
  eq nonce2(cipher2(r4)) \in cnonce(nw(s)) = false .
  eq cipher2(r4) \in cenc2(nw(s)) = false .

  red lm4(cipher2(r4),r4,nw(s))
    implies inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  -- eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq creator(nonce(cipher1(r3))) = r1 .
	eq forwhom(nonce(cipher1(r3))) = sender(r4) .
	eq random(nonce(cipher1(r3))) = r2 .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  -- eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
  eq creator(nonce1(cipher2(r4))) = r1 .
	eq forwhom(nonce1(cipher2(r4))) = sender(r4) .
	eq random(nonce1(cipher2(r4))) = r2 .
	eq principal(cipher2(r4)) = sender(r4) .
-- 
  eq sender(r4) = intruder .
  eq creator(nonce2(cipher2(r4))) = creator(n1) .
  eq forwhom(nonce2(cipher2(r4))) = forwhom(n1) .
  eq (random(nonce2(cipher2(r4))) = random(n1)) = false .

  red inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  -- eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq creator(nonce(cipher1(r3))) = r1 .
	eq forwhom(nonce(cipher1(r3))) = sender(r4) .
	eq random(nonce(cipher1(r3))) = r2 .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  -- eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
  eq creator(nonce1(cipher2(r4))) = r1 .
	eq forwhom(nonce1(cipher2(r4))) = sender(r4) .
	eq random(nonce1(cipher2(r4))) = r2 .
	eq principal(cipher2(r4)) = sender(r4) .
-- 
  eq sender(r4) = intruder .
  eq creator(nonce2(cipher2(r4))) = creator(n1) .
  eq (forwhom(nonce2(cipher2(r4))) = forwhom(n1)) = false .

  red inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  -- eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq creator(nonce(cipher1(r3))) = r1 .
	eq forwhom(nonce(cipher1(r3))) = sender(r4) .
	eq random(nonce(cipher1(r3))) = r2 .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  -- eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
  eq creator(nonce1(cipher2(r4))) = r1 .
	eq forwhom(nonce1(cipher2(r4))) = sender(r4) .
	eq random(nonce1(cipher2(r4))) = r2 .
	eq principal(cipher2(r4)) = sender(r4) .
-- 
  eq sender(r4) = intruder .
  eq (creator(nonce2(cipher2(r4))) = creator(n1)) = false .

  red inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  -- eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq creator(nonce(cipher1(r3))) = r1 .
	eq forwhom(nonce(cipher1(r3))) = sender(r4) .
	eq random(nonce(cipher1(r3))) = r2 .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  -- eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
  eq creator(nonce1(cipher2(r4))) = r1 .
	eq forwhom(nonce1(cipher2(r4))) = sender(r4) .
	eq random(nonce1(cipher2(r4))) = r2 .
	eq principal(cipher2(r4)) = sender(r4) .
-- 
  eq (sender(r4) = intruder) = false .

  red inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  -- eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq creator(nonce(cipher1(r3))) = r1 .
	eq forwhom(nonce(cipher1(r3))) = sender(r4) .
	eq random(nonce(cipher1(r3))) = r2 .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  -- eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
  eq creator(nonce1(cipher2(r4))) = r1 .
	eq forwhom(nonce1(cipher2(r4))) = sender(r4) .
	eq random(nonce1(cipher2(r4))) = r2 .
	eq (principal(cipher2(r4)) = sender(r4)) = false .

  red inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  -- eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq creator(nonce(cipher1(r3))) = r1 .
	eq forwhom(nonce(cipher1(r3))) = sender(r4) .
	eq random(nonce(cipher1(r3))) = r2 .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  eq creator(nonce1(cipher2(r4))) = r1 .
	eq forwhom(nonce1(cipher2(r4))) = sender(r4) .
	eq (random(nonce1(cipher2(r4))) = r2) = false .

  red inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  -- eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq creator(nonce(cipher1(r3))) = r1 .
	eq forwhom(nonce(cipher1(r3))) = sender(r4) .
	eq random(nonce(cipher1(r3))) = r2 .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  eq creator(nonce1(cipher2(r4))) = r1 .
	eq (forwhom(nonce1(cipher2(r4))) = sender(r4)) = false .

  red inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  -- eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq creator(nonce(cipher1(r3))) = r1 .
	eq forwhom(nonce(cipher1(r3))) = sender(r4) .
	eq random(nonce(cipher1(r3))) = r2 .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
  eq (creator(nonce1(cipher2(r4))) = r1) = false .

  red inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  -- eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq creator(nonce(cipher1(r3))) = r1 .
	eq forwhom(nonce(cipher1(r3))) = sender(r4) .
	eq random(nonce(cipher1(r3))) = r2 .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .

  red inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  -- eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq creator(nonce(cipher1(r3))) = r1 .
	eq forwhom(nonce(cipher1(r3))) = sender(r4) .
	eq random(nonce(cipher1(r3))) = r2 .
	eq principal(cipher1(r3)) = r1 .
	eq (receiver(r4) = r1) = false .

  red inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
  -- eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq creator(nonce(cipher1(r3))) = r1 .
	eq forwhom(nonce(cipher1(r3))) = sender(r4) .
	eq random(nonce(cipher1(r3))) = r2 .
	eq (principal(cipher1(r3)) = r1) = false .

  red inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
	eq creator(nonce(cipher1(r3))) = r1 .
	eq forwhom(nonce(cipher1(r3))) = sender(r4) .
	eq (random(nonce(cipher1(r3))) = r2) = false .

  red inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
	eq creator(nonce(cipher1(r3))) = r1 .
	eq (forwhom(nonce(cipher1(r3))) = sender(r4)) = false .

  red inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
	eq (creator(nonce(cipher1(r3))) = r1) = false .

  red inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq (key(cipher1(r3)) = sender(r4)) = false .
  red inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq (receiver(r3) = sender(r4)) = false .
  red inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq creator(r3) = r1 .
	eq (sender(r3) = r1) = false .
  red inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq (creator(r3) = r1) = false .
  red inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
  red inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (r3 \in nw(s)) = false .
  red inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = true .
	eq m2?(r4) = false .
  red inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close

--> true
open INV .
	op n1 : -> Nonce .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
  eq m1?(r3) = false .
  red inv130(s,n1) implies inv130(sdm3(s,r1,r2,r3,r4),n1) .
close