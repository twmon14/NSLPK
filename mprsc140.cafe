open INV .
	:goal{
		eq [nslpk1 :nonexec] : inv140(S:System,C:Cipher1) = true .
        eq [inv100 :nonexec] : inv100(S:System,C:Cipher1) = true .
	}

	:ind on (S:System)

	:apply(si)
-- fkm11
	:apply(tc)

	:def csb1 = :ctf [C#Cipher1 \in cenc1(nw(S#System)) .]

	:apply(csb1)

	:def csb2 = :ctf {eq key(C#Cipher1) = intruder .}

	:apply(csb2)

    :def csb3 = :ctf {eq key(C@Cipher1) = key(C#Cipher1) .}

	:apply(csb3)

    :def csb4 = :ctf {eq nonce(C@Cipher1) = nonce(C#Cipher1) .}

	:apply(csb4)

    :def csb5 = :ctf {eq principal(C@Cipher1) = principal(C#Cipher1) .}

	:apply(csb5)

	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)

	:imp [inv100] by {C:Cipher1 <- C#Cipher1 ;}

	:apply (rd)

    :imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

	:apply (rd)
-- -- fkm12
-- 	:apply(tc)

-- 	:def csb3 = :ctf [N#Nonce \in cnonce(nw(S#System)) .]

-- 	:apply(csb3)

-- 	:def csb4 = :ctf {eq key(C@Cipher1) = intruder .}

-- 	:apply(csb4)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)
-- -- fkm21
-- 	:apply(tc)

-- 	:def csb5 = :ctf [C#Cipher2 \in cenc2(nw(S#System)) .]

-- 	:apply(csb5)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)
-- -- fkm22
-- 	:apply(tc)

-- 	:def csb6 = :ctf [N#Nonce \in cnonce(nw(S#System)) .]

-- 	:apply(csb6)

-- 	:def csb7 = :ctf [N0#Nonce \in cnonce(nw(S#System)) .]

-- 	:apply(csb7)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)
-- -- kfm31
-- 	:apply(tc)

-- 	:def csb8 = :ctf [C#Cipher3 \in cenc3(nw(S#System)) .]

-- 	:apply(csb8)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)
-- -- fkm32
-- 	:apply(tc)

-- 	:def csb9 = :ctf [N#Nonce \in cnonce(nw(S#System)) .]

-- 	:apply(csb9)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)
-- -- init
-- 	:apply(tc)

-- 	:apply (rd)
-- -- sdm1
-- 	:apply(tc)

-- 	:def csb10 = :ctf [R#Random \in ur(S#System) .]

-- 	:apply(csb10)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:def csb11 = :ctf {eq key(C@Cipher1) = intruder .}

-- 	:apply(csb11)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)
-- -- sdm2
-- 	:apply(tc)

-- 	:def csb12 = :ctf [M#Message \in nw(S#System) .]

-- 	:apply(csb12)

-- 	:def csb13 = :ctf [m1?(M#Message) .]

-- 	:apply(csb13)

-- 	:def csb14 = :ctf {eq receiver(M#Message) = P#Principal .}

-- 	:apply(csb14)

-- 	:def csb15 = :ctf {eq key(cipher1(M#Message)) = P#Principal .}

-- 	:apply(csb15)

-- 	:def csb16 = :ctf {eq principal(cipher1(M#Message)) = sender(M#Message).}

-- 	:apply(csb16)

-- 	:def csb17 = :ctf [R#Random \in ur(S#System) .]

-- 	:apply(csb17)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)
-- -- sdm3
-- 	:apply(tc)

-- 	:def csb18 = :ctf [m1?(M#Message) .]

-- 	:apply(csb18)

-- 	:def csb19 = :ctf [m2?(M0#Message) .]

-- 	:apply(csb19)

-- 	:def csb20 = :ctf [M#Message \in nw(S#System) .]

-- 	:apply(csb20)

-- 	:def csb21 = :ctf [M0#Message \in nw(S#System) .]

-- 	:apply(csb21)

-- 	:def csb22 = :ctf {eq creator(M#Message) = P#Principal .}

-- 	:apply(csb22)

-- 	:def csb23 = :ctf {eq creator(nonce(cipher1(M#Message))) = P#Principal .}

-- 	:apply(csb23)

-- 	:def csb24 = :ctf {eq creator(nonce1(cipher2(M0#Message))) = P#Principal .}

-- 	:apply(csb24)

-- 	:def csb25 = :ctf {eq key(cipher2(M0#Message)) = P#Principal .}

-- 	:apply(csb25)

-- 	:def csb26 = :ctf {eq principal(cipher1(M#Message)) = P#Principal .}

-- 	:apply(csb26)

-- 	:def csb27 = :ctf {eq receiver(M0#Message) = P#Principal .}

-- 	:apply(csb27)

-- 	:def csb28 = :ctf {eq sender(M#Message) = P#Principal .}

-- 	:apply(csb28)

-- 	:def csb29 = :ctf {eq forwhom(nonce(cipher1(M#Message))) = sender(M0#Message).}

-- 	:apply(csb29)

-- 	:def csb30 = :ctf {eq forwhom(nonce1(cipher2(M0#Message))) = sender(M0#Message).}

-- 	:apply(csb30)

-- 	:def csb31 = :ctf {eq key(cipher1(M#Message)) = sender(M0#Message).}

-- 	:apply(csb31)

-- 	:def csb32 = :ctf {eq principal(cipher2(M0#Message)) = sender(M0#Message).}

-- 	:apply(csb32)

-- 	:def csb33 = :ctf {eq receiver(M#Message) = sender(M0#Message).}

-- 	:apply(csb33)

-- 	:def csb34 = :ctf {eq random(nonce(cipher1(M#Message))) = R#Random .}

-- 	:apply(csb34)

-- 	:def csb35 = :ctf {eq random(nonce1(cipher2(M0#Message))) = R#Random .}

-- 	:apply(csb35)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)

-- 	:imp [nslpk1] by {C:Cipher1 <- C@Cipher1 ;}

-- 	:apply (rd)


close