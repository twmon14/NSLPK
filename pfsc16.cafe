open INV .
	:goal{
		eq [inv10 :nonexec] : inv100(S:System,C1:Cipher1) = true .
		eq [inv11 :nonexec] : inv110(S:System,C2:Cipher2) = true .
		eq [inv12 :nonexec] : inv120(S:System,C3:Cipher3) = true .
		eq [inv16 :nonexec] : inv160(S:System,N:Nonce) = true .
	}

	:ind on (S:System)
	:apply(si)
  
-- fkm11, ignore 10,11,12,
  :apply(tc)
  :postpone .
  :postpone .
  :postpone .

	:def csb1 = :ctf [C#Cipher1 \in cenc1(nw(S#System)) .]
	:apply(csb1)

    :def csb2 = :ctf {eq key(C#Cipher1) = intruder .}
	:apply(csb2)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:imp [inv10] by {C1:Cipher1 <- C#Cipher1 ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

-- fkm12, ignore 10,11,12
  :apply(tc)
  :postpone .
  :postpone .
  :postpone .
 
	:def csb3 = :ctf [N#Nonce \in cnonce(nw(S#System)) .]
	:apply(csb3)
    :def csb3_1 = :ctf {eq P0#Principal = intruder .}
	:apply(csb3_1)
    :def csb4 = :ctf {eq N@Nonce = N#Nonce .}
	:apply(csb4)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

  -- fkm21, ignore 10,11,12
  :apply(tc)
  :postpone .
  :postpone .
  :postpone .

	:def csb7 = :ctf [C#Cipher2 \in cenc2(nw(S#System)) .]
	:apply(csb7)
  	:def csb8 = :ctf {eq key(C#Cipher2) = intruder .}
	:apply(csb8)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:imp [inv11] by {C2:Cipher2 <- C#Cipher2 ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

  -- fkm22, ignore 10,11,12
  :apply(tc)
  :postpone .
  :postpone .
  :postpone .

    :def csb12 = :ctf [N#Nonce \in cnonce(nw(S#System)) .]

	:apply(csb12)

	:def csb13 = :ctf [N0#Nonce \in cnonce(nw(S#System)) .]

	:apply(csb13)

	:def csb14 = :ctf {eq P0#Principal  = intruder .}

	:apply(csb14)

	:def csb15 = :ctf {eq N@Nonce = N#Nonce .}

	:apply(csb15)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:def csb16 = :ctf {eq N@Nonce = N0#Nonce .}

	:apply(csb16)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

-- fkm31, , ignore 10,11,12
  :apply(tc)
  :postpone .
  :postpone .
  :postpone .

	:def csb23 = :ctf [C#Cipher3 \in cenc3(nw(S#System)) .]
	:apply(csb23)

	:def csb24 = :ctf {eq key(C#Cipher3) = intruder .}
	:apply(csb24)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:imp [inv12] by {C3:Cipher3 <- C#Cipher3 ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

-- fkm32, ignore 10,11,12
  :apply(tc)
  :postpone .
  :postpone .
  :postpone .

	:def csb25 = :ctf [N#Nonce \in cnonce(nw(S#System)) .]
	:apply(csb25)

    :def csb250 = :ctf {eq P0#Principal = intruder .}
	:apply(csb250) 

	:def csb26 = :ctf {eq N@Nonce = N#Nonce .}
	:apply(csb26)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

  -- init
  :apply(tc)
	:apply (rd)
	:apply (rd)
	:apply (rd)
	:apply (rd)

-- sdm1, ignore 10,11,12
  :apply(tc)
  :postpone .
  :postpone .
  :postpone .

	:def csb27 = :ctf [R#Random \in ur(S#System) .]
	:apply(csb27)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    :def csb28 = :ctf {eq P0#Principal = intruder .}
	:apply(csb28) 

	:def csb280 = :ctf {eq N@Nonce = n(P#Principal,intruder,R#Random) .}
	:apply(csb280)

    :imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    :imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    :imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

-- sdm2, ignore 10,11,12
  :apply(tc)
  :postpone .
  :postpone .
  :postpone .

	:def csb29 = :ctf [M#Message \in nw(S#System) .]
	:apply(csb29)

	:def csb30 = :ctf [m1?(M#Message) .]
	:apply(csb30)

	:def csb31 = :ctf {eq receiver(M#Message) = P#Principal .}
	:apply(csb31)

	:def csb32 = :ctf {eq key(cipher1(M#Message)) = P#Principal .}
	:apply(csb32)

	:def csb33 = :ctf {eq principal(cipher1(M#Message)) = sender(M#Message) .}
	:apply(csb33)

	:def csb34 = :ctf [R#Random \in ur(S#System) .]
	:apply(csb34)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:def csb35 = :ctf {eq sender(M#Message) = intruder .}

	:apply(csb35)

	:def csb36 = :ctf {eq N@Nonce = nonce(cipher1(M#Message)) .}

	:apply(csb36)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:def csb37 = :ctf {eq N@Nonce = n(P#Principal,intruder,R#Random) .}

	:apply(csb37)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

-- sdm3, ignore 10,11,12
  :apply(tc)
  :postpone .
  :postpone .
  :postpone .

	:def csb50 = :ctf [M#Message \in nw(S#System) .]
	:apply(csb50)

	:def csb51 = :ctf [M0#Message \in nw(S#System) .]
	:apply(csb51)

	:def csb52 = :ctf [m1?(M#Message) .]
	:apply(csb52)

	:def csb53 = :ctf [m2?(M0#Message) .]
	:apply(csb53)

	:def csb54 = :ctf {eq creator(M#Message) = P#Principal .}
	:apply(csb54)

	:def csb55 = :ctf {eq sender(M#Message) = P#Principal .}
	:apply(csb55)

	:def csb56 = :ctf {eq receiver(M#Message) = sender(M0#Message) .}
	:apply(csb56)

	:def csb57 = :ctf {eq key(cipher1(M#Message)) = sender(M0#Message) .}
	:apply(csb57)

	:def csb58 = :ctf {eq nonce(cipher1(M#Message)) = n(P#Principal,sender(M0#Message),R#Random) .}
	:apply(csb58)

	:def csb61 = :ctf {eq principal(cipher1(M#Message)) = P#Principal .}
	:apply(csb61)

	:def csb62 = :ctf {eq receiver(M0#Message) = P#Principal .}
	:apply(csb62)

	:def csb63 = :ctf {eq key(cipher2(M0#Message)) = P#Principal .}
	:apply(csb63)

	:def csb64 = :ctf {eq nonce1(cipher2(M0#Message)) = n(P#Principal,sender(M0#Message),R#Random) .}
	:apply(csb64)

	:def csb67 = :ctf {eq principal(cipher2(M0#Message)) = sender(M0#Message) .}
	:apply(csb67)

	:def csb68 = :ctf {eq sender(M0#Message) = intruder .}
	:apply(csb68)

	:def csb69 = :ctf {eq N@Nonce = nonce2(cipher2(M0#Message)) .}
	:apply(csb69)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    :imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    :imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    :imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

    :imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

	:imp [inv16] by {N:Nonce <- N@Nonce ;}
	:apply (rd)

close