-- sdm3
--> true
open INV .
  :id(nslpk1)
    op p : -> Principal .
    op q : -> Principal .
    op r : -> Random .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq q = intruder .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk1)
    op p : -> Principal .
    op q : -> Principal .
    op r : -> Random .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq (q = intruder) = false .
    eq sender(r4) = q .
    eq nonce2(cipher2(r4)) = n(q,p,r) .
    eq r \in ur(s) = true .

	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk1)
    op p : -> Principal .
    op q : -> Principal .
    op r : -> Random .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq (q = intruder) = false .
    eq sender(r4) = intruder .
    eq nonce2(cipher2(r4)) = n(q,p,r) .
    eq r \in ur(s) = false .
    eq r1 = intruder .

	red inv160(s,n(q,p,r)) implies inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk1)
    op p : -> Principal .
    op q : -> Principal .
    op r : -> Random .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq (q = intruder) = false .
    eq sender(r4) = intruder .
    eq nonce2(cipher2(r4)) = n(q,p,r) .
    eq r \in ur(s) = false .
    eq (r1 = intruder) = false .

	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk1)
    op p : -> Principal .
    op q : -> Principal .
    op r : -> Random .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq (q = intruder) = false .
    eq sender(r4) = intruder .
    eq (nonce2(cipher2(r4)) = n(q,p,r)) = false .

	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk1)
    op p : -> Principal .
    op q : -> Principal .
    op r : -> Random .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq (q = intruder) = false .
    eq (sender(r4) = intruder) = false .
    eq r \in ur(s) = true .
	red inv180(s,p,sender(r4),r1,r,n(r1,sender(r4),r2))
	implies inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk1)
    op p : -> Principal .
    op q : -> Principal .
    op r : -> Random .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq (q = intruder) = false .
    eq (sender(r4) = intruder) = false .

    eq r \in ur(s) = false .

	eq p = r1 .
	eq r1 = intruder .
	eq sender(r4) = q .
	eq n(q,intruder,r) = nonce2(cipher2(r4)) .

	red inv210(s,q,intruder,r)
	implies inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk1)
    op p : -> Principal .
    op q : -> Principal .
    op r : -> Random .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq (q = intruder) = false .
    eq (sender(r4) = intruder) = false .

    eq r \in ur(s) = false .

	eq p = r1 .
	eq r1 = intruder .
	eq sender(r4) = q .
	eq (n(q,intruder,r) = nonce2(cipher2(r4))) = false .

	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk1)
    op p : -> Principal .
    op q : -> Principal .
    op r : -> Random .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq (q = intruder) = false .
    eq (sender(r4) = intruder) = false .

    eq r \in ur(s) = false .

	eq p = r1 .
	eq r1 = intruder .
	eq (sender(r4) = q) = false .

	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk1)
    op p : -> Principal .
    op q : -> Principal .
    op r : -> Random .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq (q = intruder) = false .
    eq (sender(r4) = intruder) = false .

    eq r \in ur(s) = false .

	eq p = r1 .
	eq (r1 = intruder) = false .

	-- eq q = sender(r4) .
	-- eq n(q,r1,r) = nonce2(cipher2(r4)) .
	eq sender(r4) = q .
	eq nonce2(cipher2(r4)) = n(q,r1,r) .

	eq n(q,r1,r) \in cnonce(nw(s)) = true .

	red inv210(s,q,r1,r)
	implies inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

-- ntnf
open INV .
  :id(nslpk1)
    op p : -> Principal .
    op q : -> Principal .
    op r : -> Random .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq (q = intruder) = false .
    eq (sender(r4) = intruder) = false .

    eq r \in ur(s) = false .

	eq p = r1 .
	eq (r1 = intruder) = false .

	eq sender(r4) = q .
	eq nonce2(cipher2(r4)) = n(q,r1,r) .

	eq n(q,r1,r) \in cnonce(nw(s)) = false .
	
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

-- ***************************
-- ntnf
open INV .
  :id(nslpk1)
    op p : -> Principal .
    op q : -> Principal .
    op r : -> Random .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq (q = intruder) = false .
    eq (sender(r4) = intruder) = false .
    eq r \in ur(s) = false .
	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

-- ********************************

open INV .
  :id(nslpk1)
    op p : -> Principal .
    op q : -> Principal .
    op r : -> Random .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq (q = intruder) = false .
    eq (sender(r4) = intruder) = false .
	eq r \in ur(s) = false .

	eq sender(r4) = q .
    eq nonce2(cipher2(r4)) = n(q,p,r) .
	eq r1 = intruder .

	eq n(q,p,r)\in cnonce(nw(s)) = true .

	red inv210(s,q,p,r)
	implies inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

-- ntnf
open INV .
  :id(nslpk1)
    op p : -> Principal .
    op q : -> Principal .
    op r : -> Random .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq (q = intruder) = false .
    eq (sender(r4) = intruder) = false .
	eq r \in ur(s) = false .

	eq sender(r4) = q .
    eq nonce2(cipher2(r4)) = n(q,p,r) .
	eq r1 = intruder .

	eq n(q,p,r)\in cnonce(nw(s)) = false .

	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

-- ***************************
open INV .
  :id(nslpk1)
    op p : -> Principal .
    op q : -> Principal .
    op r : -> Random .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq sender(r4) = intruder .

	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk1)
    op p : -> Principal .
    op q : -> Principal .
    op r : -> Random .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq (sender(r4) = intruder) = false .

	eq r \in ur(s) = true .

	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk1)
    op p : -> Principal .
    op q : -> Principal .
    op r : -> Random .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq (sender(r4) = intruder) = false .

	eq r \in ur(s) = false .

	eq q = intruder .

	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

open INV .
  :id(nslpk1)
    op p : -> Principal .
    op q : -> Principal .
    op r : -> Random .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq (sender(r4) = intruder) = false .

	eq r \in ur(s) = false .

	eq (q = intruder) = false .

	eq r1 = intruder .

	eq n(q,p,r) \in cnonce(nw(s)) = true .

	red inv210(s,q,p,r)
	implies inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

-- ntnf
open INV .
  :id(nslpk1)
    op p : -> Principal .
    op q : -> Principal .
    op r : -> Random .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq key(cipher1(r3)) = sender(r4) .
	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
    eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq (sender(r4) = intruder) = false .

	eq r \in ur(s) = false .

	eq (q = intruder) = false .

	eq r1 = intruder .

	eq n(q,p,r) \in cnonce(nw(s)) = false .

	eq sender(r4) = q .
    eq nonce2(cipher2(r4)) = n(q,p,r) .

	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
close

-- open INV .
--   :id(nslpk1)
--     op p : -> Principal .
--     op q : -> Principal .
--     op r : -> Random .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op r4 : -> Message .
-- 	op s : -> System .
--     eq (r3 \in nw(s)) = true .
-- 	eq (r4 \in nw(s)) = true .
-- 	eq m1?(r3) = true .
-- 	eq m2?(r4) = true .
-- 	eq creator(r3) = r1 .
--     eq sender(r3) = r1 .
--     eq receiver(r3) = sender(r4) .
--     eq key(cipher1(r3)) = sender(r4) .
-- 	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
-- 	eq principal(cipher1(r3)) = r1 .
--     eq receiver(r4) = r1 .
-- 	eq key(cipher2(r4)) = r1 .
--     eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
-- 	eq (principal(cipher2(r4)) = sender(r4)) = false .
-- 	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
-- close

-- open INV .
--   :id(nslpk1)
--     op p : -> Principal .
--     op q : -> Principal .
--     op r : -> Random .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op r4 : -> Message .
-- 	op s : -> System .
--     eq (r3 \in nw(s)) = true .
-- 	eq (r4 \in nw(s)) = true .
-- 	eq m1?(r3) = true .
-- 	eq m2?(r4) = true .
-- 	eq creator(r3) = r1 .
--     eq sender(r3) = r1 .
--     eq receiver(r3) = sender(r4) .
--     eq key(cipher1(r3)) = sender(r4) .
-- 	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
-- 	eq principal(cipher1(r3)) = r1 .
--     eq receiver(r4) = r1 .
-- 	eq key(cipher2(r4)) = r1 .
--     eq (nonce1(cipher2(r4)) = n(r1,sender(r4),r2)) = false .
-- 	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
-- close

-- open INV .
--   :id(nslpk1)
--     op p : -> Principal .
--     op q : -> Principal .
--     op r : -> Random .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op r4 : -> Message .
-- 	op s : -> System .
--     eq (r3 \in nw(s)) = true .
-- 	eq (r4 \in nw(s)) = true .
-- 	eq m1?(r3) = true .
-- 	eq m2?(r4) = true .
-- 	eq creator(r3) = r1 .
--     eq sender(r3) = r1 .
--     eq receiver(r3) = sender(r4) .
--     eq key(cipher1(r3)) = sender(r4) .
-- 	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
-- 	eq principal(cipher1(r3)) = r1 .
--     eq receiver(r4) = r1 .
-- 	eq (key(cipher2(r4)) = r1) = false .
-- 	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
-- close

-- open INV .
--   :id(nslpk1)
--     op p : -> Principal .
--     op q : -> Principal .
--     op r : -> Random .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op r4 : -> Message .
-- 	op s : -> System .
--     eq (r3 \in nw(s)) = true .
-- 	eq (r4 \in nw(s)) = true .
-- 	eq m1?(r3) = true .
-- 	eq m2?(r4) = true .
-- 	eq creator(r3) = r1 .
--     eq sender(r3) = r1 .
--     eq receiver(r3) = sender(r4) .
--     eq key(cipher1(r3)) = sender(r4) .
-- 	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
-- 	eq principal(cipher1(r3)) = r1 .
--     eq (receiver(r4) = r1) = false .
-- 	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
-- close

-- open INV .
--   :id(nslpk1)
--     op p : -> Principal .
--     op q : -> Principal .
--     op r : -> Random .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op r4 : -> Message .
-- 	op s : -> System .
--     eq (r3 \in nw(s)) = true .
-- 	eq (r4 \in nw(s)) = true .
-- 	eq m1?(r3) = true .
-- 	eq m2?(r4) = true .
-- 	eq creator(r3) = r1 .
--     eq sender(r3) = r1 .
--     eq receiver(r3) = sender(r4) .
--     eq key(cipher1(r3)) = sender(r4) .
-- 	eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
-- 	eq (principal(cipher1(r3)) = r1) = false .
-- 	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
-- close

-- open INV .
--   :id(nslpk1)
--     op p : -> Principal .
--     op q : -> Principal .
--     op r : -> Random .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op r4 : -> Message .
-- 	op s : -> System .
--     eq (r3 \in nw(s)) = true .
-- 	eq (r4 \in nw(s)) = true .
-- 	eq m1?(r3) = true .
-- 	eq m2?(r4) = true .
-- 	eq creator(r3) = r1 .
--     eq sender(r3) = r1 .
--     eq receiver(r3) = sender(r4) .
--     eq key(cipher1(r3)) = sender(r4) .
-- 	eq (nonce(cipher1(r3)) = n(r1,sender(r4),r2)) = false .
-- 	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
-- close

-- --> true
-- open INV .
--   :id(nslpk1)
--     op p : -> Principal .
--     op q : -> Principal .
--     op r : -> Random .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op r4 : -> Message .
-- 	op s : -> System .
-- 	eq (r3 \in nw(s)) = true .
-- 	eq (r4 \in nw(s)) = true .
-- 	eq m1?(r3) = true .
-- 	eq m2?(r4) = true .
-- 	eq creator(r3) = r1 .
--     eq sender(r3) = r1 .
--     eq receiver(r3) = sender(r4) .
--     eq (key(cipher1(r3)) = sender(r4)) = false .
-- 	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
-- close

-- --> true
-- open INV .
--   :id(nslpk1)
--     op p : -> Principal .
--     op q : -> Principal .
--     op r : -> Random .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op r4 : -> Message .
-- 	op s : -> System .
-- 	eq (r3 \in nw(s)) = true .
-- 	eq (r4 \in nw(s)) = true .
-- 	eq m1?(r3) = true .
-- 	eq m2?(r4) = true .
-- 	eq creator(r3) = r1 .
--     eq sender(r3) = r1 .
--     eq (receiver(r3) = sender(r4)) = false .
-- 	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
-- close

-- --> true
-- open INV .
--   :id(nslpk1)
--     op p : -> Principal .
--     op q : -> Principal .
--     op r : -> Random .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op r4 : -> Message .
-- 	op s : -> System .
-- 	eq (r3 \in nw(s)) = true .
-- 	eq (r4 \in nw(s)) = true .
-- 	eq m1?(r3) = true .
-- 	eq m2?(r4) = true .
-- 	eq creator(r3) = r1 .
--     eq (sender(r3) = r1) = false .
-- 	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
-- close

-- --> true
-- open INV .
--   :id(nslpk1)
--     op p : -> Principal .
--     op q : -> Principal .
--     op r : -> Random .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op r4 : -> Message .
-- 	op s : -> System .
-- 	eq (r3 \in nw(s)) = true .
-- 	eq (r4 \in nw(s)) = true .
-- 	eq m1?(r3) = true .
-- 	eq m2?(r4) = true .
-- 	eq (creator(r3) = r1) = false .
-- 	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
-- close

-- --> true
-- open INV .
--   :id(nslpk1)	
--     op p : -> Principal .
--     op q : -> Principal .
--     op r : -> Random .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op r4 : -> Message .
-- 	op s : -> System .
-- 	eq (r3 \in nw(s)) = true .
-- 	eq (r4 \in nw(s)) = true .
-- 	eq m1?(r3) = true .
-- 	eq m2?(r4) = false .
-- 	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
-- close

-- --> true
-- open INV .
--   :id(nslpk1)
--     op p : -> Principal .
--     op q : -> Principal .
--     op r : -> Random .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op r4 : -> Message .
-- 	op s : -> System .
-- 	eq (r3 \in nw(s)) = true .
-- 	eq (r4 \in nw(s)) = true .
-- 	eq m1?(r3) = false .
-- 	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
-- close

-- --> true
-- open INV .
--   :id(nslpk1)	
--     op p : -> Principal .
--     op q : -> Principal .
--     op r : -> Random .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op r4 : -> Message .
-- 	op s : -> System .
-- 	eq (r3 \in nw(s)) = true .
-- 	eq (r4 \in nw(s)) = false .
-- 	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
-- close

-- --> true
-- open INV .
--   :id(nslpk1)	
--     op p : -> Principal .
--     op q : -> Principal .
--     op r : -> Random .
-- 	op r1 : -> Principal .
-- 	op r2 : -> Random .
-- 	op r3 : -> Message .
-- 	op r4 : -> Message .
-- 	op s : -> System .
-- 	eq (r3 \in nw(s)) = false .
-- 	red inv240(s,p,q,r) implies inv240(sdm3(s,r1,r2,r3,r4),p,q,r) .
-- close