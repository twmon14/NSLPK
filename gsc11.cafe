open INV .
	:goal{
		eq [nslpk1 :nonexec] : inv110(S:System,C:Cipher2) = true .
	}

	:ind on (S:System)

	:apply(si)
-- fkm11
	:apply(tc)

	:def csb1 = :ctf [C#Cipher1 \in cenc1(nw(S#System)) .]

	:apply(csb1)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)
-- fkm12
	:apply(tc)

	:def csb2 = :ctf [N#Nonce \in cnonce(nw(S#System)) .]

	:apply(csb2)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)
-- fkm21
	:apply(tc)

	:def csb3 = :ctf [C#Cipher2 \in cenc2(nw(S#System)) .]

	:apply(csb3)

	:def csb4 = :ctf {eq C@Cipher2  = C#Cipher2 .}

	:apply(csb4)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)
-- fkm22
	:apply(tc)

	:def csb5 = :ctf [N#Nonce \in cnonce(nw(S#System)) .]

	:apply(csb5)

	:def csb6 = :ctf [N0#Nonce \in cnonce(nw(S#System)) .]

	:apply(csb6)

	:def csb7 = :ctf {eq C@Cipher2  = enc2(P0#Principal,N#Nonce,N0#Nonce,P#Principal) .}

	:apply(csb7)

	:def csb8 = :ctf {eq P0#Principal  = intruder .}

	:apply(csb8)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)
-- fkm31
	:apply(tc)

	:def csb9 = :ctf [C#Cipher3 \in cenc3(nw(S#System)) .]

	:apply(csb9)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)
-- fkm32
	:apply(tc)

	:def csb10 = :ctf [N#Nonce \in cnonce(nw(S#System)) .]

	:apply(csb10)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)
-- init
	:apply(tc)

	:apply (rd)
-- sdm1
	:apply(tc)

	:def csb11 = :ctf [R#Random \in ur(S#System) .]

	:apply(csb11)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)
-- sdm2
	:apply(tc)

	:def csb12 = :ctf [M#Message \in nw(S#System) .]

	:apply(csb12)

	:def csb13 = :ctf [m1?(M#Message) .]

	:apply(csb13)

	:def csb14 = :ctf {eq receiver(M#Message) = P#Principal .}

	:apply(csb14)

	:def csb15 = :ctf {eq key(cipher1(M#Message)) = P#Principal .}

	:apply(csb15)

	:def csb16 = :ctf {eq principal(cipher1(M#Message)) = sender(M#Message) .}

	:apply(csb16)

	:def csb17 = :ctf [R#Random \in ur(S#System) .]

	:apply(csb17)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:def csb18 = :ctf {eq C@Cipher2  = enc2(sender(M#Message),nonce(cipher1(M#Message)),n(P#Principal,sender(M#Message),R#Random),P#Principal) .}

	:apply(csb18)

	:def csb19 = :ctf {eq sender(M#Message) = intruder .}

	:apply(csb19)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)
-- sdm3
	:apply(tc)

	:def csb20 = :ctf [M#Message \in nw(S#System) .]

	:apply(csb20)

	:def csb21 = :ctf [M0#Message \in nw(S#System) .]

	:apply(csb21)

	:def csb22 = :ctf [m1?(M#Message) .]

	:apply(csb22)

	:def csb23 = :ctf [m2?(M0#Message) .]

	:apply(csb23)

	:def csb24 = :ctf {eq creator(M#Message) = P#Principal .}

	:apply(csb24)

	:def csb25 = :ctf {eq sender(M#Message) = P#Principal .}

	:apply(csb25)

	:def csb26 = :ctf {eq receiver(M#Message) = sender(M0#Message) .}

	:apply(csb26)

	:def csb27 = :ctf {eq key(cipher1(M#Message)) = sender(M0#Message) .}

	:apply(csb27)

	:def csb28 = :ctf {eq nonce(cipher1(M#Message)) = n(P#Principal,sender(M0#Message),R#Random) .}

	:apply(csb28)

	:def csb29 = :ctf {eq principal(cipher1(M#Message)) = P#Principal .}

	:apply(csb29)

	:def csb30 = :ctf {eq receiver(M0#Message) = P#Principal .}

	:apply(csb30)

	:def csb31 = :ctf {eq key(cipher2(M0#Message)) = P#Principal .}

	:apply(csb31)

	:def csb32 = :ctf {eq nonce1(cipher2(M0#Message)) = n(P#Principal,sender(M0#Message),R#Random) .}

	:apply(csb32)

	:def csb33 = :ctf {eq principal(cipher2(M0#Message)) = sender(M0#Message) .}

	:apply(csb33)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)

	:imp [nslpk1] by {C:Cipher2 <- C@Cipher2 ;}

	:apply (rd)


close