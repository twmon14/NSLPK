open INV .
	:goal{
		eq [inv17 :nonexec] : inv170(S:System,P:Principal,P1:Principal,P0:Principal,R:Random,N:Nonce) = true .
	}

	:ind on (S:System)

	:apply(si)
-- fkm11
	:apply(tc)

	:def csb1 = :ctf [C#Cipher1 \in cenc1(nw(S#System)) .]

	:apply(csb1)

    :def csb101 = :ctf {eq P@Principal = intruder .}

	:apply(csb101)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

-- fkm12
	:apply(tc)

	:def csb2 = :ctf [N#Nonce \in cnonce(nw(S#System)) .]

	:apply(csb2)

    :def csb201 = :ctf {eq P@Principal = intruder .}

	:apply(csb201)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

-- fkm21
	:apply(tc)

	:def csb3 = :ctf [C#Cipher2 \in cenc2(nw(S#System)) .]

	:apply(csb3)

    :def csb301 = :ctf {eq P@Principal = intruder .}

	:apply(csb301)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

    :def csb302 = :ctf [m1(P@Principal,P@Principal,P1@Principal,enc1(P1@Principal,n(P@Principal,P1@Principal,
    R@Random),P@Principal)) \in nw(S#System) .]

    :apply(csb302)

    :def csb303 = :ctf {eq P1@Principal = intruder .}

	:apply(csb303)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

    :def csb304 = :ctf {eq P0@Principal = intruder .}

	:apply(csb304)

    :def csb305 = :ctf {eq P#Principal = P1@Principal .}

	:apply(csb305)

    :def csb306 = :ctf {eq P0#Principal = P@Principal .}

	:apply(csb306)

    :def csb307 = :ctf {eq enc2(P@Principal,n(P@Principal,P1@Principal,R@Random),N@Nonce,P1@Principal) = C#Cipher2 .}

	:apply(csb307)

    :def csb308 = :ctf [m2(P1@Principal,P1@Principal,P@Principal,C#Cipher2) \in nw(S#System) .]

	:apply(csb308)

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:postpone . -- inv220

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

-- fkm22
	:apply(tc)

    :def csb4 = :ctf {eq N#Nonce = n(P@Principal,P1@Principal,R@Random) .}

	:apply(csb4)

	:def csb401 = :ctf [n(P@Principal,P1@Principal,R@Random) \in cnonce(nw(S#System)) .]

	:apply(csb401)

	:def csb5 = :ctf [N0#Nonce \in cnonce(nw(S#System)) .]

	:apply(csb5)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:postpone . -- inv13

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

    :def csb501 = :ctf [N#Nonce \in cnonce(nw(S#System)) .]

	:apply(csb501)

    :def csb502 = :ctf [N0#Nonce \in cnonce(nw(S#System)) .]

	:apply(csb502)

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

-- fkm31
	:apply(tc)

    :def csb6 = :ctf [C#Cipher3 \in cenc3(nw(S#System)) .]

	:apply(csb6)

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

-- fkm32
	:apply(tc)

    :def csb7 = :ctf [N#Nonce \in cnonce(nw(S#System)) .]

	:apply(csb7)

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

-- init
	:apply(tc)

	:apply (rd)

-- sdm1
	:apply(tc)

	:def csb8 = :ctf [R#Random \in ur(S#System) .]

	:apply(csb8)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

    :def csb9 = :ctf {eq P@Principal = intruder .}

	:apply(csb9)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

    :def csb10 = :ctf {eq R@Random = R#Random .}

	:apply(csb10)

    :def csb11 = :ctf {eq P0#Principal = P1@Principal .}

	:apply(csb11)

    :def csb12 = :ctf {eq P#Principal = P@Principal .}

	:apply(csb12)

    :def csb13 = :ctf [enc2(P@Principal,n(P@Principal,P1@Principal,R#Random),N@Nonce,P1@Principal) \in cenc2(nw(S#System)) .]

	:apply(csb13)

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:postpone . -- inv 19

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

-- sdm2
	:apply(tc)

	:def csb24 = :ctf [M#Message \in nw(S#System) .]

	:apply(csb24)

	:def csb25 = :ctf [m1?(M#Message) .]

	:apply(csb25)

	:def csb26 = :ctf {eq receiver(M#Message) = P#Principal .}

	:apply(csb26)

	:def csb27 = :ctf {eq key(cipher1(M#Message)) = P#Principal .}

	:apply(csb27)

	:def csb28 = :ctf {eq principal(cipher1(M#Message)) = sender(M#Message) .}

	:apply(csb28)

	:def csb29 = :ctf [R#Random \in ur(S#System) .]

	:apply(csb29)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

    :def csb30 = :ctf [m2(P0@Principal,P1@Principal,P@Principal,enc2(P@Principal,n(P@Principal,P1@Principal,R@Random),N@Nonce,P1@Principal)) = 
    m2(P#Principal,P#Principal,sender(M#Message),enc2(sender(M#Message),nonce(cipher1(M#Message)),n(P#Principal,sender(M#Message),R#Random),P#Principal)) .]

    :apply(csb30)

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}
	:apply (rd)
    -- :postpone .

    :def csb31 = :ctf [m2(P1@Principal,P1@Principal,P@Principal,enc2(P@Principal,n(P@Principal,P1@Principal,R@Random),N@Nonce,P1@Principal)) = 
    m2(P#Principal,P#Principal,sender(M#Message),enc2(sender(M#Message),nonce(cipher1(M#Message)),n(P#Principal,sender(M#Message),R#Random),P#Principal)) .]

    :apply(csb31)

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}
	-- :apply (rd)
    :postpone .

    :imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}
	-- :apply (rd)
    :postpone .

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

-- sdm3
	:apply(tc)

	:def csb36 = :ctf [M#Message \in nw(S#System) .]

	:apply(csb36)

	:def csb37 = :ctf [M0#Message \in nw(S#System) .]

	:apply(csb37)

	:def csb38 = :ctf [m1?(M#Message) .]

	:apply(csb38)

	:def csb39 = :ctf [m2?(M0#Message) .]

	:apply(csb39)

	:def csb40 = :ctf {eq creator(M#Message) = P#Principal .}

	:apply(csb40)

	:def csb41 = :ctf {eq sender(M#Message) = P#Principal .}

	:apply(csb41)

	:def csb42 = :ctf {eq receiver(M#Message) = sender(M0#Message) .}

	:apply(csb42)

	:def csb43 = :ctf {eq key(cipher1(M#Message)) = sender(M0#Message) .}

	:apply(csb43)

	:def csb44 = :ctf {eq nonce(cipher1(M#Message)) = n(P#Principal,sender(M0#Message),R#Random) .}

	:apply(csb44)

	:def csb45 = :ctf {eq principal(cipher1(M#Message)) = P#Principal .}

	:apply(csb45)

	:def csb46 = :ctf {eq receiver(M0#Message) = P#Principal .}

	:apply(csb46)

	:def csb47 = :ctf {eq key(cipher2(M0#Message)) = P#Principal .}

	:apply(csb47)

	:def csb48 = :ctf {eq nonce1(cipher2(M0#Message)) = n(P#Principal,sender(M0#Message),R#Random) .}

	:apply(csb48)

	:def csb49 = :ctf {eq principal(cipher2(M0#Message)) = sender(M0#Message) .}

	:apply(csb49)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

	:imp [inv17] by {N:Nonce <- N@Nonce ; P0:Principal <- P0@Principal ; P1:Principal <- P1@Principal ; P:Principal <-
    P@Principal ; R:Random <- R@Random ;}

	:apply (rd)

close
