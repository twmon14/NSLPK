-- init
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
  red inv140(init,c1) .
close

-- fkm11
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher1 .
	op s : -> System .
	eq (r3 \in cenc1(nw(s))) = true .
	eq key(r3) = intruder .
	red inv100(s,r3) implies inv140(s,c1) implies inv140(fkm11(s,r1,r2,r3),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher1 .
	op s : -> System .
	eq (r3 \in cenc1(nw(s))) = true .
	eq (key(r3) = intruder) = false .
    eq c1 = r3 .
	red inv140(s,c1) implies inv140(fkm11(s,r1,r2,r3),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher1 .
	op s : -> System .
	eq (r3 \in cenc1(nw(s))) = true .
	eq (key(r3) = intruder) = false .
    eq (c1 = r3) = false .
	red inv140(s,c1) implies inv140(fkm11(s,r1,r2,r3),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher1 .
	op s : -> System .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv140(s,c1) implies inv140(fkm11(s,r1,r2,r3),c1) .
close

-- fkm12
--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq c1 = enc1(r2,r3,r1) .
    eq r1 = intruder .
    eq r2 = intruder .
	red inv140(s,c1) implies inv140(fkm12(s,r1,r2,r3),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq c1 = enc1(r2,r3,r1) .
    eq r1 = intruder .
    eq (r2 = intruder) = false .
	red inv140(s,c1) implies inv140(fkm12(s,r1,r2,r3),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq c1 = enc1(r2,r3,r1) .
    eq (r1 = intruder) = false .
	red inv140(s,c1) implies inv140(fkm12(s,r1,r2,r3),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq (c1 = enc1(r2,r3,r1)) = false .
    eq r2 = intruder .
    eq nonce(c1) = r3 .
	red inv140(s,c1) implies inv140(fkm12(s,r1,r2,r3),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq (c1 = enc1(r2,r3,r1)) = false .
    eq r2 = intruder .
    eq (nonce(c1) = r3) = false .
 	red inv140(s,c1) implies inv140(fkm12(s,r1,r2,r3),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq (c1 = enc1(r2,r3,r1)) = false .
    eq (r2 = intruder) = false .
	red inv140(s,c1) implies inv140(fkm12(s,r1,r2,r3),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv140(s,c1) implies inv140(fkm12(s,r1,r2,r3),c1) .
close

-- fkm21
--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher2 .
	op s : -> System .
	eq (r3 \in cenc2(nw(s))) = true .
    eq key(r3) = intruder .
	red inv110(s,r3) implies inv140(s,c1) implies inv140(fkm21(s,r1,r2,r3),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher2 .
	op s : -> System .
	eq (r3 \in cenc2(nw(s))) = true .
    eq (key(r3) = intruder) = false .
	red inv140(s,c1) implies inv140(fkm21(s,r1,r2,r3),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher2 .
	op s : -> System .
	eq (r3 \in cenc2(nw(s))) = false .
	red inv140(s,c1) implies inv140(fkm21(s,r1,r2,r3),c1) .
close

-- fkm22
--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    eq nonce(c1) = r3 .
	red inv140(s,c1) implies inv140(fkm22(s,r1,r2,r3,r4),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
	eq (nonce(c1) = r3) = false .
    eq nonce(c1) = r4 .
	red inv140(s,c1) implies inv140(fkm22(s,r1,r2,r3,r4),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
	eq (nonce(c1) = r3) = false .
    eq (nonce(c1) = r4) = false .
	red inv140(s,c1) implies inv140(fkm22(s,r1,r2,r3,r4),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
    eq (r2 = intruder) = false .
	red inv140(s,c1) implies inv140(fkm22(s,r1,r2,r3,r4),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = false .
	red inv140(s,c1) implies inv140(fkm22(s,r1,r2,r3,r4),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv140(s,c1) implies inv140(fkm22(s,r1,r2,r3,r4),c1) .
close

-- fkm31
--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher3 .
	op s : -> System .
	eq (r3 \in cenc3(nw(s))) = true .
    eq key(r3) = intruder .
	red inv120(s,r3) implies inv140(s,c1) implies inv140(fkm31(s,r1,r2,r3),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher3 .
	op s : -> System .
	eq (r3 \in cenc3(nw(s))) = true .
    eq (key(r3) = intruder) = false .
	red inv140(s,c1) implies inv140(fkm31(s,r1,r2,r3),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher3 .
	op s : -> System .
	eq (r3 \in cenc3(nw(s))) = false .
	red inv140(s,c1) implies inv140(fkm31(s,r1,r2,r3),c1) .
close

-- fkm32
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    eq nonce(c1) = r3 .
	red inv140(s,c1) implies inv140(fkm32(s,r1,r2,r3),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq r2 = intruder .
    eq (nonce(c1) = r3) = false .
    red inv140(s,c1) implies inv140(fkm32(s,r1,r2,r3),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
    eq (r2 = intruder) = false .
	red inv140(s,c1) implies inv140(fkm32(s,r1,r2,r3),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv140(s,c1) implies inv140(fkm32(s,r1,r2,r3),c1) .
close

-- sdm1
--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = true .
	red inv140(s,c1) implies inv140(sdm1(s,r1,r2,r3),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = false .
    eq c1 = enc1(r2,n(r1,r2,r3),r1) .
    eq r2 = intruder .
	red inv140(s,c1) implies inv140(sdm1(s,r1,r2,r3),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = false .
    eq c1 = enc1(r2,n(r1,r2,r3),r1) .
    eq (r2 = intruder) = false .
	eq r1 = intruder .
	eq n(intruder,r2,r3) \in cnonce(nw(s)) = true .
	red inv140(s,c1) implies inv140(sdm1(s,r1,r2,r3),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = false .
    eq c1 = enc1(r2,n(r1,r2,r3),r1) .
    eq (r2 = intruder) = false .
	eq r1 = intruder .
	eq n(intruder,r2,r3) \in cnonce(nw(s)) = false .
	red inv160(s,n(intruder,r2,r3)) 
	implies inv140(s,c1) implies inv140(sdm1(s,r1,r2,r3),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = false .
    eq c1 = enc1(r2,n(r1,r2,r3),r1) .
    eq (r2 = intruder) = false .
	eq (r1 = intruder) = false .
	red inv140(s,c1) implies inv140(sdm1(s,r1,r2,r3),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = false .
    eq (c1 = enc1(r2,n(r1,r2,r3),r1)) = false .
	eq r2 = intruder .
    eq nonce(c1) = n(r1,intruder,r3) .
	red inv140(s,c1) implies inv140(sdm1(s,r1,r2,r3),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = false .
    eq (c1 = enc1(r2,n(r1,r2,r3),r1)) = false .
	eq r2 = intruder .
    eq (nonce(c1) = n(r1,intruder,r3)) = false .
	red inv140(s,c1) implies inv140(sdm1(s,r1,r2,r3),c1) .
close

--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = false .
    eq (c1 = enc1(r2,n(r1,r2,r3),r1)) = false .
	eq (r2 = intruder) = false .
	red inv140(s,c1) implies inv140(sdm1(s,r1,r2,r3),c1) .
close

-- sdm2
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = true .
	red inv140(s,c1) implies inv140(sdm2(s,r1,r2,r3),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq sender(r3) = intruder .
  eq nonce(c1) = n(r1,intruder,r2) .
	red inv140(s,c1) implies inv140(sdm2(s,r1,r2,r3),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq sender(r3) = intruder .
  eq (nonce(c1) = n(r1,intruder,r2)) = false .
  eq nonce(c1) = nonce(cipher1(r3)) .
	red inv140(s,c1) implies inv140(sdm2(s,r1,r2,r3),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq sender(r3) = intruder .
  eq (nonce(c1) = n(r1,intruder,r2)) = false .
  eq (nonce(c1) = nonce(cipher1(r3))) = false .
	red inv140(s,c1) implies inv140(sdm2(s,r1,r2,r3),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
  eq (sender(r3) = intruder) = false .
	red inv140(s,c1) implies inv140(sdm2(s,r1,r2,r3),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv140(s,c1) implies inv140(sdm2(s,r1,r2,r3),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq (key(cipher1(r3)) = r1) = false .
	red inv140(s,c1) implies inv140(sdm2(s,r1,r2,r3),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq (receiver(r3) = r1) = false .
	red inv140(s,c1) implies inv140(sdm2(s,r1,r2,r3),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = false .
	red inv140(s,c1) implies inv140(sdm2(s,r1,r2,r3),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = false .
	red inv140(s,c1) implies inv140(sdm2(s,r1,r2,r3),c1) .
close

-- sdm3
--> true
open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq sender(r4) = intruder .
	eq nonce(c1) = nonce2(cipher2(r4)) .
	red inv140(s,c1) implies inv140(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq sender(r4) = intruder .
	eq (nonce(c1) = nonce2(cipher2(r4))) = false .
	red inv140(s,c1) implies inv140(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

    eq (sender(r4) = intruder) = false .
	red inv140(s,c1) implies inv140(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq (principal(cipher2(r4)) = sender(r4)) = false .
	red inv140(s,c1) implies inv140(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq (nonce1(cipher2(r4)) = n(r1,sender(r4),r2)) = false .
	red inv140(s,c1) implies inv140(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
	red inv140(s,c1) implies inv140(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq (receiver(r4) = r1) = false .
	red inv140(s,c1) implies inv140(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq (principal(cipher1(r3)) = r1) = false .
	red inv140(s,c1) implies inv140(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq (nonce(cipher1(r3)) = n(r1,sender(r4),r2)) = false .
	red inv140(s,c1) implies inv140(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq (key(cipher1(r3)) = sender(r4)) = false .
	red inv140(s,c1) implies inv140(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq (receiver(r3) = sender(r4)) = false .
	red inv140(s,c1) implies inv140(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq (sender(r3) = r1) = false .
	red inv140(s,c1) implies inv140(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
	red inv140(s,c1) implies inv140(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
	red inv140(s,c1) implies inv140(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
	red inv140(s,c1) implies inv140(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
	red inv140(s,c1) implies inv140(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher1 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = false .
	red inv140(s,c1) implies inv140(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :proof(nslpk1)
close