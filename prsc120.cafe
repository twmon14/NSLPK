--> I) Base case
--> init
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
  red inv120(init,c1) .
close

--> II) Induction cases
--> 1. fkm11(s,r1,r2,r3)
--> r3 \in cenc1(nw(s))
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher1 .
	op s : -> System .
	eq (r3 \in cenc1(nw(s))) = true .
	red inv120(s,c1) implies inv120(fkm11(s,r1,r2,r3),c1) .
close

--> ~(r3 \in cenc1(nw(s)))
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher1 .
	op s : -> System .
	eq (r3 \in cenc1(nw(s))) = false .
	red inv120(s,c1) implies inv120(fkm11(s,r1,r2,r3),c1) .
close

--> 2. fkm12(s,r1,r2,r3)
--> r3 \in cenc1(nw(s))
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	red inv120(s,c1) implies inv120(fkm12(s,r1,r2,r3),c1) .
close

--> ~(r3 \in cenc1(nw(s)))
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv120(s,c1) implies inv120(fkm12(s,r1,r2,r3),c1) .
close

--> 3. fkm21(s,r1,r2,r3)
--> r3 \in cenc1(nw(s))
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher2 .
	op s : -> System .
	eq (r3 \in cenc2(nw(s))) = true .
	red inv120(s,c1) implies inv120(fkm21(s,r1,r2,r3),c1) .
close

--> ~(r3 \in cenc1(nw(s)))
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher2 .
	op s : -> System .
	eq (r3 \in cenc2(nw(s))) = false .
	red inv120(s,c1) implies inv120(fkm21(s,r1,r2,r3),c1) .
close

--> 4. fkm22(s,r1,r2,r3,r4)
--> (r3 \in cnonce(nw(s))),(r4 \in cnonce(nw(s)))
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = true .
	red inv120(s,c1) implies inv120(fkm22(s,r1,r2,r3,r4),c1) .
close

--> (r3 \in cnonce(nw(s))),~(r4 \in cnonce(nw(s)))
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (r4 \in cnonce(nw(s))) = false .
	red inv120(s,c1) implies inv120(fkm22(s,r1,r2,r3,r4),c1) .
close

--> ~(r3 \in cnonce(nw(s)))
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op r4 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv120(s,c1) implies inv120(fkm22(s,r1,r2,r3,r4),c1) .
close

--> 5. fkm31(s,r1,r2,r3)
--> (r3 \in cenc3(nw(s))),key(c1) = intr
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher3 .
	op s : -> System .
	eq (r3 \in cenc3(nw(s))) = true .
 	 eq c1 = r3 .
	red inv120(s,c1) implies inv120(fkm31(s,r1,r2,r3),c1) .
close

--> (r3 \in cenc3(nw(s))),~key(c1) = intr
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher3 .
	op s : -> System .
	eq (r3 \in cenc3(nw(s))) = true .
    eq (c1 = r3) = false .
	red inv120(s,c1) implies inv120(fkm31(s,r1,r2,r3),c1) .
close

--> ~(r3 \in cenc3(nw(s)))
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Cipher3 .
	op s : -> System .
	eq (r3 \in cenc3(nw(s))) = false .
	red inv120(s,c1) implies inv120(fkm31(s,r1,r2,r3),c1) .
close

--> 6. fkm32(s,r1,r2,r3)
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq c1 = enc3(r2,r3) .
  	eq r2 = intruder .
  	red inv120(s,c1) implies inv120(fkm32(s,r1,r2,r3),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq c1 = enc3(r2,r3) .
    eq (r2 = intruder) = false .
	red inv120(s,c1) implies inv120(fkm32(s,r1,r2,r3),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = true .
	eq (c1 = enc3(r2,r3)) = false .
	red inv120(s,c1) implies inv120(fkm32(s,r1,r2,r3),c1) .
close

--> ~(r3 \in cnonce(nw(s)))
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Nonce .
	op s : -> System .
	eq (r3 \in cnonce(nw(s))) = false .
	red inv120(s,c1) implies inv120(fkm32(s,r1,r2,r3),c1) .
close

--> 7. sdm1(s,r1,r2,r3)
--> (r3 \in ur(s))
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = true .
	red inv120(s,c1) implies inv120(sdm1(s,r1,r2,r3),c1) .
close

--> ~(r3 \in ur(s))
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Principal .
	op r3 : -> Random .
	op s : -> System .
	eq (r3 \in ur(s)) = false .
	red inv120(s,c1) implies inv120(sdm1(s,r1,r2,r3),c1) .
close

--> sdm2(s,r1,r2,r3)
--> r3 \in nw(s),m1?(r3),receiver(r3) = r1,key(cipher1(r3)) = r1,principal(cipher1(r3)) = sender(r3),r2 \in ur(s)
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = true .
	red inv120(s,c1) implies inv120(sdm2(s,r1,r2,r3),c1) .
close

--> r3 \in nw(s),m1?(r3),receiver(r3) = r1,key(cipher1(r3)) = r1,principal(cipher1(r3)) = sender(r3),~r2 \in ur(s)
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq principal(cipher1(r3)) = sender(r3) .
  eq r2 \in ur(s) = false .
	red inv120(s,c1) implies inv120(sdm2(s,r1,r2,r3),c1) .
close

--> r3 \in nw(s),m1?(r3),receiver(r3) = r1,key(cipher1(r3)) = r1,~principal(cipher1(r3)) = sender(r3)
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq key(cipher1(r3)) = r1 .
  eq (principal(cipher1(r3)) = sender(r3)) = false .
	red inv120(s,c1) implies inv120(sdm2(s,r1,r2,r3),c1) .
close

--> r3 \in nw(s),m1?(r3),receiver(r3) = r1,~key(cipher1(r3)) = r1
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq receiver(r3) = r1 .
  eq (key(cipher1(r3)) = r1) = false .
	red inv120(s,c1) implies inv120(sdm2(s,r1,r2,r3),c1) .
close

--> r3 \in nw(s),m1?(r3),~receiver(r3) = r1
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = true .
  eq (receiver(r3) = r1) = false .
	red inv120(s,c1) implies inv120(sdm2(s,r1,r2,r3),c1) .
close

--> r3 \in nw(s),~m1?(r3)
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = true .
  eq m1?(r3) = false .
	red inv120(s,c1) implies inv120(sdm2(s,r1,r2,r3),c1) .
close

--> ~r3 \in nw(s)
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op s : -> System .
  eq r3 \in nw(s) = false .
	red inv120(s,c1) implies inv120(sdm2(s,r1,r2,r3),c1) .
close

--> sdm3(s,r1,r2,r3,r4)
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

	eq c1 = enc3(sender(r4),nonce2(cipher2(r4))) .
    eq sender(r4) = intruder .
  	red inv120(s,c1) implies inv120(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

	eq c1 = enc3(sender(r4),nonce2(cipher2(r4))) .
    eq (sender(r4) = intruder) = false .
  	red inv120(s,c1) implies inv120(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
    eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq principal(cipher2(r4)) = sender(r4) .

	eq (c1 = enc3(sender(r4),nonce2(cipher2(r4)))) = false .
  	red inv120(s,c1) implies inv120(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq nonce1(cipher2(r4)) = n(r1,sender(r4),r2) .
	eq (principal(cipher2(r4)) = sender(r4)) = false .
	red inv120(s,c1) implies inv120(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq key(cipher2(r4)) = r1 .
    eq (nonce1(cipher2(r4)) = n(r1,sender(r4),r2)) = false .
	red inv120(s,c1) implies inv120(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq receiver(r4) = r1 .
	eq (key(cipher2(r4)) = r1) = false .
	red inv120(s,c1) implies inv120(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq principal(cipher1(r3)) = r1 .
	eq (receiver(r4) = r1) = false .
	red inv120(s,c1) implies inv120(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq nonce(cipher1(r3)) = n(r1,sender(r4),r2) .
	eq (principal(cipher1(r3)) = r1) = false .
	red inv120(s,c1) implies inv120(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
	eq sender(r3) = r1 .
	eq receiver(r3) = sender(r4) .
	eq key(cipher1(r3)) = sender(r4) .
    eq (nonce(cipher1(r3)) = n(r1,sender(r4),r2)) = false .
	red inv120(s,c1) implies inv120(sdm3(s,r1,r2,r3,r4),c1) .
close

--> (r3 \in nw(s)) = true,(r4 \in nw(s)) = true,m1?(r3) = true,m2?(r4) = true,
--> creator(r3) = r1,sender(r3) = r1,receiver(r3) = sender(r4),~key(cipher1(r3)) = sender(r4),
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq receiver(r3) = sender(r4) .
    eq (key(cipher1(r3)) = sender(r4)) = false .
	red inv120(s,c1) implies inv120(sdm3(s,r1,r2,r3,r4),c1) .
close

--> (r3 \in nw(s)) = true,(r4 \in nw(s)) = true,m1?(r3) = true,m2?(r4) = true,
--> creator(r3) = r1,sender(r3) = r1,~receiver(r3) = sender(r4)
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq sender(r3) = r1 .
    eq (receiver(r3) = sender(r4)) = false .
	red inv120(s,c1) implies inv120(sdm3(s,r1,r2,r3,r4),c1) .
close

--> (r3 \in nw(s)) = true,(r4 \in nw(s)) = true,m1?(r3) = true,m2?(r4) = true,
--> creator(r3) = r1,~sender(r3) = r1
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq creator(r3) = r1 .
    eq (sender(r3) = r1) = false .
	red inv120(s,c1) implies inv120(sdm3(s,r1,r2,r3,r4),c1) .
close

--> (r3 \in nw(s)) = true,(r4 \in nw(s)) = true,m1?(r3) = true,m2?(r4) = true,
--> ~creator(r3) = r1,
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = true .
	eq (creator(r3) = r1) = false .
	red inv120(s,c1) implies inv120(sdm3(s,r1,r2,r3,r4),c1) .
close

--> (r3 \in nw(s)) = true,(r4 \in nw(s)) = true,m1?(r3) = true,m2?(r4) = false,
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = true .
	eq m2?(r4) = false .
	red inv120(s,c1) implies inv120(sdm3(s,r1,r2,r3,r4),c1) .
close

--> (r3 \in nw(s)) = true,(r4 \in nw(s)) = true,m1?(r3) = false
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = true .
	eq m1?(r3) = false .
	red inv120(s,c1) implies inv120(sdm3(s,r1,r2,r3,r4),c1) .
close

--> (r3 \in nw(s)) = true,(r4 \in nw(s)) = false
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = true .
	eq (r4 \in nw(s)) = false .
	red inv120(s,c1) implies inv120(sdm3(s,r1,r2,r3,r4),c1) .
close

--> (r3 \in nw(s)) = false
open INV .
  :id(nslpk1)
	op c1 : -> Cipher3 .
	op r1 : -> Principal .
	op r2 : -> Random .
	op r3 : -> Message .
	op r4 : -> Message .
	op s : -> System .
	eq (r3 \in nw(s)) = false .
	red inv120(s,c1) implies inv120(sdm3(s,r1,r2,r3,r4),c1) .
close

open INV .
  :proof(nslpk1)
close